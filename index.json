[{"categories":["Point Clouds"],"content":"\"Dynamic Graph CNN for Learning on Point Clouds\" Simplified","date":"2019-07-12","objectID":"/post/dynamic-graph-cnn/","tags":["deep-learning","dgcnn","ai","graph","3d","cnn","pointclouds"],"title":"\"Dynamic Graph CNN for Learning on Point Clouds\" Simplified","uri":"/post/dynamic-graph-cnn/"},{"categories":["Point Clouds"],"content":"Introduction Point clouds are a collection of data points in space, usually produced by a 3D scanner. A large number of points are measured on the external surfaces of the objects and then represented as point clouds. Along with the relative 3D coordinates, point clouds can be accompanied by other pertaining features i.e. RGB or intensity. Point clouds are not the only representation of 3D space, voxel and mesh polygon are some other popular representations. Figures 1, 2, and 3 are some examples of different 3D space representations. Fig. 1: Example of point cloud representation [4] Fig. 2: Example of voxel representation [5] Fig. 3: Example of polygon mesh representation [6] Fast acquisition of 3D point cloud from sensor devices has been exhilarating researchers to concentrate on processing these raw data directly, rather doing any kind of preprocessing. Consequently, there is a set of applications built on point cloud processing including navigation [7], self-driving [8], robotics [9], shape synthesis and digital modeling [10]. Fitting raw point cloud data into deep learning model is not straightforward with respect to other conventional ways of doing it due to the irregular structure of point clouds. Continuous distribution of the point positions in the space and unordered set of points make it harder to extract spatial information through point clouds data. One of the pioneering works in the field of point clouds processing is called PointNet [2], which overcomes the permutation invariance issue of point cloud data. There are other extensions available inspired by this work, which try to exploit local features considering neighborhood points and resulting in improved performance. To gain proper geometric relationships among points, the authors of the titled paper propose an operation called EdgeConv using the concepts from graph neural networks. They extend the PointNet modules by incorporating EdgeConv, which can be easily integrated into existing deep learning models. They achieve state-of-the-art performance on several datasets, including ModelNet40 and S3DIS for classification and segmentation tasks. Related Work There has been a pile of works pertaining to capture local feature descriptors for point clouds which are basically handcrafted features intended towards certain types of problems and intermediate data structures [11]-[13]. On top of that, machine learning approaches are wrapped around to generate end results. With the emergence of convolutional neural networks (CNNs) [14], [15], handcrafted features are not being embraced anymore. The simplest form of a CNN architecture mixes convolutional and pooling units to accumulate the local information in images. Figure 4 shows a basic CNN architecture. Fig. 4: A basic CNN architecture [16] There are mainly two types of 3D deep learning methods, namely view-based and volumetric methods. While view-based methods apply standard CNNs on 2D views of the target 3D object [17], [18], conversion of geometric data to a regular 3D grid takes place before passing through a CNN in volumetric methods. Voxelization is one of the simplest ways to do the conversion [19], [20]. There are also studies on combination of both methods [21]. PointNets [2] apply a symmetric function on point clouds data to achieve permutation invariant features. PointNets treat each point individually for learning 3D latent features which is unaware of local geometric structures and to achieve the global transformation. However, the employed spatial transformer network [22] gets really complex and computationally expensive for this kind of non-Euclidean data. PointNet++ [3] architecture is an improved version of PointNet to exploit the local geometric features. Although PointNet++ achieves state-of-the-art results on several point cloud analysis benchmarks, still it treats individual points in local point sets independently. PointCNN [23], KCNet [24] are some other networks to improve PointNets lacking. How","date":"2019-07-12","objectID":"/post/dynamic-graph-cnn/:0:0","tags":["deep-learning","dgcnn","ai","graph","3d","cnn","pointclouds"],"title":"\"Dynamic Graph CNN for Learning on Point Clouds\" Simplified","uri":"/post/dynamic-graph-cnn/"},{"categories":["Point Clouds"],"content":"Graph Graph represents a set of objects (nodes) and their relationships (edges). A lot of real-world data doesn’t fit into grids. Social networks data, knowledge graph, transportation or communication networks, protein interaction networks, and molecular networks are to name a few of the real-world data, which we need to take care of differently before passing into the neural networks. Graph neural networks can directly operate on graph structure and can be used for node classification, graph classification, link prediction, and so on. Figure 5 shows the visual difference of Euclidean grid and non-Euclidean graph data. Fig. 5: Left- Euclidean space, Right- graph in non-Euclidean space [33] ","date":"2019-07-12","objectID":"/post/dynamic-graph-cnn/:0:1","tags":["deep-learning","dgcnn","ai","graph","3d","cnn","pointclouds"],"title":"\"Dynamic Graph CNN for Learning on Point Clouds\" Simplified","uri":"/post/dynamic-graph-cnn/"},{"categories":["Point Clouds"],"content":"Graph Convolution Networks (GCNs) In GCNs, convolutional operations are applied similar to the standard CNNs, but on graph data. GCNs can be divided into two major types: spectral-based and spatial-based GCNs. Spectral-based GCNs apply filters from the perspective of graph signal processing and involve Eigen decomposition of graph Laplacian. Graph convolution operation in GCNs can be interpreted as removing noise from graph signals. Spatial-based GCNs formulate graph convolutions as aggregating feature information from neighbors. GCNs generalize the operation of convolution from traditional data (images or grids) to graph data. They learn a function, $f$ to generate a node $v_i$ s representation by aggregating it’s own features $X_i$ and neighbors’ features $X_j$ where $j \\in N(v_i)$ namely neighborhood aggregation. Figure 6 shows a simple approach to aggregate neighborhood information. Fig. 6: Neighborhood aggregation [34] In the ideal case, equations 1, 2, and 3 represent spatial based GCNs and show how to aggregate neighborhood information. Initially, for the first layer, embeddings are set to the equal values of node features (shown in equation 1). After that, the $k$ h layer embedding of node $v$ can be found by summing up the average of neighbors’ previous layer embeddings and previous layer embedding of $v$ followed by applying a non-linear activation function i.e. ReLU or tanh (shown in equation 2). At last, $h_v^k$ can be sent to any loss function and stochastic gradient descent will train the matrices $W_k$ and $B_k$ . $$ h_v^0 = x_v \\ \\ \\ \\ \\ (1) $$ $$ h_v^k = \\sigma \\left ( W_k \\sum_{u \\in N(v)} \\frac{h_u^{k-1}}{|N(v)|} + B_kh_v^{k-1} \\right ), \\forall k \\in {1,…,K} \\ \\ \\ \\ \\ (2) $$ $$ z_v = h_v^K \\ \\ \\ \\ \\ (3) $$ In GCNs, max/min/sum/average pooling can be seen as graph coarsening [35] which is responsible for creating structurally similar to the original but smaller graphs [36]. Figure 7 and 8 show the differences in basic pooling operation in grid-based CNNs and GCNs respectively. Fig. 7: Max pooling operation in grid-based CNN [37] Fig. 8: Graph coarsening used as pooling operation in GCN [38] Interleaving aggregation and coarsening, one after another, figure 9 shows a generalized skeleton of a GCN. Fig. 9: GCN with pooling layer for graph classification [39] ","date":"2019-07-12","objectID":"/post/dynamic-graph-cnn/:0:2","tags":["deep-learning","dgcnn","ai","graph","3d","cnn","pointclouds"],"title":"\"Dynamic Graph CNN for Learning on Point Clouds\" Simplified","uri":"/post/dynamic-graph-cnn/"},{"categories":["Point Clouds"],"content":"EdgeConv ","date":"2019-07-12","objectID":"/post/dynamic-graph-cnn/:1:0","tags":["deep-learning","dgcnn","ai","graph","3d","cnn","pointclouds"],"title":"\"Dynamic Graph CNN for Learning on Point Clouds\" Simplified","uri":"/post/dynamic-graph-cnn/"},{"categories":["Point Clouds"],"content":"Definition In the titled paper, authors introduce an operation called EdgeConv which has translation-invariant and non-locality properties. It captures local geometric structures from local neighborhood graph and applies convolution-like operations on the edges. Unlike graph CNNs, the graph dynamically updates after each layer of the network. Point clouds can be seen as graph $G=(V,E)$ where $v={1,…,n}$ and $E \\subset V \\times V$ In the simplest case, they construct k-NN graph in $R^F$ containing directed edges of the $(i,j_{i1}),…,(i,j_{ik})$ such that points $x_{ji},…,x_{jk}$ are closest to $x_i$ Now, they define EdgeConv operation as shown in equation 4, where $\\Theta = (\\theta_i,…,\\theta_k)$ act as the weights of the filter. $$x_i^{’} = \\square_{j:(i,j) \\in \\epsilon} ; h_{\\Theta}(x_i,x_j) \\ \\ \\ \\ \\ (4)$$ Figure 10 shows how EdgeConv operation aggregates the edge features associated with the edges. Fig. 10: The output of EdgeConv is calculated by aggregating the edge features associated with edges from each connecting vertex. [1] ","date":"2019-07-12","objectID":"/post/dynamic-graph-cnn/:1:1","tags":["deep-learning","dgcnn","ai","graph","3d","cnn","pointclouds"],"title":"\"Dynamic Graph CNN for Learning on Point Clouds\" Simplified","uri":"/post/dynamic-graph-cnn/"},{"categories":["Point Clouds"],"content":"Choice of edge function and aggregation operation As suggested in the paper, the choice of edge function, $h$ and aggregation operation, $\\square$ is really crucial and affects overall results at a large scale. In table 1, the properties of several edge functions are summarized. Interleaving aggregation and coarsening, one after another, figure 9 shows a generalized skeleton of a GCN. _TABLE I: Properties of different edge functions applied to EdgeConv Dynamic Graph Update _ The EdgeConv operation can be employed several times interleaving with other classical operations in CNNs, i.e pooling depending on the task. fig: Fig. 14: DGCNN model architecture using EdgeConv [1] Authors discover benefits of graph re-computation using nearest neighbors in the feature space. The key points of DGCNN can be summarized as follows —– Design two different architectures for classification and segmentation tasks as depicted by two branches in figure 14. Both architectures share a spatial transformer component, computing a global shape transformation. The classification network includes two EdgeConv layers, followed by a pooling operation and three fully-connected layers producing classification output scores. The segmentation network uses a sequence of three EdgeConv layers, followed by three fully-connected layers producing, for each point, segmentation output scores. Each EdgeConv uses shared edge function, $h^{(l)}(x_i^{(l)}, x_j^{(l)}) = h^{(l)}(x_i^{(l)}, x_j^{(l)}-x_i^{(l)})$ across all layers and aggregation operation, $\\square = max$ For the classification architecture, the graph is constructed using $k=20$ nearest neighbors, while $k=30$ in segmentation architecture. Figure 11 shows the structure of the feature space produced at different stages of network architecture. Fig. 11: Structure of feature space produced at different stages of network architecture. Visualized as the distance between the red point and the rest of the points. [1] Evaluation Models constructed using EdgeConv can be evaluated for three major tasks: classification, part segmentation, and semantic segmentation. ","date":"2019-07-12","objectID":"/post/dynamic-graph-cnn/:1:2","tags":["deep-learning","dgcnn","ai","graph","3d","cnn","pointclouds"],"title":"\"Dynamic Graph CNN for Learning on Point Clouds\" Simplified","uri":"/post/dynamic-graph-cnn/"},{"categories":["Point Clouds"],"content":"Classification Results Authors evaluate their classification model based on the ModelNet40 [20] classification task. They follow the same strategy as PointNet. The hyper-parameters are as follow: Optimizer: Adam [40] Learning rate: 0.0001, reduced by factor 2 every 20 epochs Decay rate for batch normalization: initially 0.5 and 0.99 finally Batch size: 32 Momentum: 0.9 Figure 12 shows mean class accuracy and overall accuracy of different existing networks for classification on ModelNet40. Fig. 12: Classification results on ModelNet40 [1] ","date":"2019-07-12","objectID":"/post/dynamic-graph-cnn/:2:0","tags":["deep-learning","dgcnn","ai","graph","3d","cnn","pointclouds"],"title":"\"Dynamic Graph CNN for Learning on Point Clouds\" Simplified","uri":"/post/dynamic-graph-cnn/"},{"categories":["Point Clouds"],"content":"Part Segmentation Results EdgeConv model architectures are extended for part segmentation task on ShapeNet part dataset [41]. The same training setting is adapted from the classification task, except k is changed from 20 to 30 due to the increase of point density. NVIDIA TITAN X GPUs are used to maintain the training batch size in a distributed manner. The metric Intersection-over-Union (IoU) is used for the evaluation and comparison of the models. Figure 15 shows the results on ShapeNet part segmentation dataset. fig: Fig. 15: Part segmentation results on ShapeNet part dataset. Metric is mIoU(%) on points. [1] ","date":"2019-07-12","objectID":"/post/dynamic-graph-cnn/:3:0","tags":["deep-learning","dgcnn","ai","graph","3d","cnn","pointclouds"],"title":"\"Dynamic Graph CNN for Learning on Point Clouds\" Simplified","uri":"/post/dynamic-graph-cnn/"},{"categories":["Point Clouds"],"content":"Semantic Scene Segmentation Authors evaluate their model on Standford Large-Scale 3D Indoor Spaces Dataset (S3DIS) [42] for semantic scene segmentation task. The model used for this task is similar to the part segmentation model, except that a probability distribution over semantic object classes is generated for each input point. Figure 13 shows the results of 3D semantic segmentation task on S3DIS dataset by comparing existing models. Fig. 13: 3D semantic segmentation results on S3DIS. MS+CU for multi-scale block features with consolidation units; G+RCU for the grid-blocks with recurrent consolidation Units. [1] Later Work There have been a lot of improvement and alternatives in the field of point clouds processing and graph convolutional neural networks since the paper published. PCNN [43] and URSA [44] are such two interesting works on point cloud data processing. PCNN employs an extension operator from surface functions to volumetric functions for the robustness of convolution and pooling operations. URSA uses a constellation of points to learn classification information from point cloud data. Conclusion The paper introduces a dynamic graph update for graph convolutional networks using EdgeConv operator. EdgeConv can be incorporated easily with any existing graph CNN architecture. A wide range of experiments proves their hypothesis and shows that consideration of local geometric features in 3d recognition tasks improves in the accuracy with a large margin. Authors wish to extend their work by designing a non-shared transformer network that works on each local patch differently. They would like to extend the applicability of dynamic graph CNN in more abstract point clouds i.e. data coming from document retrieval rather than 3D geometry. References [1] Y. Wang, Y. Sun, Z. Liu, S. E. Sarma, M. M. Bronstein, and J. M. Solomon, “Dynamic graph CNN for learning on point clouds,” CoRR, vol. abs/1801.07829, 2018. [Online]. Available: http://arxiv.org/abs/1801.07829 [2] C. R. Qi, H. Su, K. Mo, and L. J. Guibas, “Pointnet: Deep learning on point sets for 3d classification and segmentation,” CoRR, vol. abs/1612.00593, 2016. [Online]. Available: http://arxiv.org/abs/1612.00593 [3] C. R. Qi, L. Yi, H. Su, and L. J. Guibas, “Pointnet++: Deep hierarchical feature learning on point sets in a metric space,” CoRR, vol. abs/1706.02413, 2017. [Online]. Available: http://arxiv.org/abs/1706.02413 [4] “Point cloud — Wikipedia, the free encyclopedia.” [Online]. Available: https://en.wikipedia.org/wiki/Point_cloud [5] “Adobe research.” [Online]. Available: https://research.adobe.com/news/a-papier-mache-approach-to-learning-3d-surface-generation [6] “Mesh ploygon — Wikipedia, the free encyclopedia.” [Online]. Available: https://en.wikipedia.org/wiki/Polygon_mesh [7] Y. Zhu, R. Mottaghi, E. Kolve, J. J. Lim, A. Gupta, L. Fei-Fei, and A. Farhadi, “Target-driven visual navigation in indoor scenes using deep reinforcement learning,” CoRR, vol. abs/1609.05143, 2016. [Online]. Available: http://arxiv.org/abs/1609.05143 [8] C. R. Qi, W. Liu, C. Wu, H. Su, and L. J. Guibas, “Frustum pointnets for 3d object detection from RGB-D data,” CoRR, vol. abs/1711.08488, [Online]. Available: http://arxiv.org/abs/1711.08488 [9] R. B. Rusu, Z.-C. Marton, N. Blodow, M. E. Dolha, and M. Beetz, “Towards 3d point cloud based object maps for household environments,” Robotics and Autonomous Systems, vol. 56, pp. 927–941, 2008. [10] R. Schnabel, R. Wahl, R. Wessel, and R. Klein, “Shape recognition in 3d point-clouds,” 05 2012. [11] O. V. Kaick, H. Zhang, G. Hamarneh, and D. Cohen-or, “A survey on shape correspondence,” 2011. [12] Y. Guo, M. Bennamoun, F. Sohel, M. Lu, and J. Wan, “3d object recognition in cluttered scenes with local surface features: A survey,” IEEE Transactions on Pattern Analysis and Machine Intelligence, 04 2014. [13] S. Biasotti, A. Cerri, A. M. Bronstein, and M. M. Bronstein, “Recent trends, applications, and perspectives in 3d shape similarity assessmen","date":"2019-07-12","objectID":"/post/dynamic-graph-cnn/:4:0","tags":["deep-learning","dgcnn","ai","graph","3d","cnn","pointclouds"],"title":"\"Dynamic Graph CNN for Learning on Point Clouds\" Simplified","uri":"/post/dynamic-graph-cnn/"},{"categories":["Machine Learning"],"content":"Exploratory Data Analysis (EDA) on Wine Quality Prediction Dataset","date":"2019-07-12","objectID":"/post/eda-on-wine-quality-dataset/","tags":["machine-learning","eda"],"title":"Exploratory Data Analysis (EDA) on Wine Quality Prediction Dataset","uri":"/post/eda-on-wine-quality-dataset/"},{"categories":["Machine Learning"],"content":"1. Introduction The article consists of Exploratory Data Analysis (EDA), predictive models and evaluation of those models for predicting the quality of wine, given a list of wine characteristics. Note: Dataset and code can be found here. ","date":"2019-07-12","objectID":"/post/eda-on-wine-quality-dataset/:1:0","tags":["machine-learning","eda"],"title":"Exploratory Data Analysis (EDA) on Wine Quality Prediction Dataset","uri":"/post/eda-on-wine-quality-dataset/"},{"categories":["Machine Learning"],"content":"2. Problem Specification The dataset specifies the quality of wine, given a list of attributes. The attributes are fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates, alcohol, and type (0 for red wine, 1 for white wine). These attributes are also known as feature set of a dataset. Along with these features, we have a label for each entry of the data, the quality of the wine which is basically a score between 0 and 10. Now, given those features and label, we have to predict the quality of wine for some unknown set of data (test data) where the quality is not given. ","date":"2019-07-12","objectID":"/post/eda-on-wine-quality-dataset/:2:0","tags":["machine-learning","eda"],"title":"Exploratory Data Analysis (EDA) on Wine Quality Prediction Dataset","uri":"/post/eda-on-wine-quality-dataset/"},{"categories":["Machine Learning"],"content":"3. Exploratory Data Analysis (EDA) EDA is used for seeing what the data can tell us beyond the formal modeling or hypothesis testing task [1]. Before fitting into models, we explore the data to have a broader impression of the data. ","date":"2019-07-12","objectID":"/post/eda-on-wine-quality-dataset/:3:0","tags":["machine-learning","eda"],"title":"Exploratory Data Analysis (EDA) on Wine Quality Prediction Dataset","uri":"/post/eda-on-wine-quality-dataset/"},{"categories":["Machine Learning"],"content":"3.1 Summary of the Features Table 1 shows the basic information about the feature columns. Here, we can see that there is no null or missing value in the data, since each column has the same number (5150) of entries. Also, we can see that other than our label column quality, we have type column which is of integer data type. Now, let’s look at the summary of the data for each feature. Table 2 shows us minimum, maximum, mean and quartile information of the data for each feature. ","date":"2019-07-12","objectID":"/post/eda-on-wine-quality-dataset/:3:1","tags":["machine-learning","eda"],"title":"Exploratory Data Analysis (EDA) on Wine Quality Prediction Dataset","uri":"/post/eda-on-wine-quality-dataset/"},{"categories":["Machine Learning"],"content":"3.2 Univariate Analysis We want to see how the data is distributed for each feature. When we only look at the distribution of the data within a single feature, we call it univariate analysis. Let’s look at the figure 1 that depicts univariate histogram plot for each feature. We can observer that wine quality is approximately normally distributed the pH is normally distributed, with few outliers fixed acidity have some outliers and peaks between 6 and 7 volatile acidity has quite a few outliers with high values, also slightly skewed to the right most of the wines have citric acid within the range of 0.25-0.30 with few other spikes at 0.01 and 0.48 density has almost normal distribution there are many outliers with high residual sugar and the distribution is skewed right chloride distribution is skewed right with outliers. distribution of free sulfur dioxide and total sulfur dioxide is skewed right the feature type seems to be ordinal or categorical data with numeric representation Figure 1: Histogram plots of the dataset Since the type feature is ordinal, there are chances that it could externally affect the distribution of other features. Let’s find the information of the dataset for each value of type, and observe if it shows any changes in the distribution. Figure 2 depicts the changes in the distribution of each feature for two different values of feature type. Figure 2: Violin plots of two different type of wines ","date":"2019-07-12","objectID":"/post/eda-on-wine-quality-dataset/:3:2","tags":["machine-learning","eda"],"title":"Exploratory Data Analysis (EDA) on Wine Quality Prediction Dataset","uri":"/post/eda-on-wine-quality-dataset/"},{"categories":["Machine Learning"],"content":"3.3 Bivariate Analysis Here, we will analyze correlations between each feature with other features. This will help us finding similar or related features by only visual inspection. Figure 3 shows the correlations between each pair of features in heatmap style. We can observe that residual sugar has a noticeable positive correlation with density. Also total sulfur dioxide is strongly correlated with the type of wine. Figure 3: Heatmap style correlation matrix Now, let’s have a closer look at the sorted version of the heatmap with respect to quality in the figure 4. We can easily figure out that, the amount of alcohol seems to be the most correlated feature for determining the quality of wine. Figure 4: Heatmap style correlation matrix sorted w.r.tquality Pairwise scatter plots give us more insight about the correlation with a different visualization perspective. Figure 5 shows pairwise scatter plots of the dataset. Figure 5: Pairwise scatter plots ","date":"2019-07-12","objectID":"/post/eda-on-wine-quality-dataset/:3:3","tags":["machine-learning","eda"],"title":"Exploratory Data Analysis (EDA) on Wine Quality Prediction Dataset","uri":"/post/eda-on-wine-quality-dataset/"},{"categories":["Machine Learning"],"content":"4. Data Preprocessing ","date":"2019-07-12","objectID":"/post/eda-on-wine-quality-dataset/:4:0","tags":["machine-learning","eda"],"title":"Exploratory Data Analysis (EDA) on Wine Quality Prediction Dataset","uri":"/post/eda-on-wine-quality-dataset/"},{"categories":["Machine Learning"],"content":"4.1 Finding Missing Values From the table 1, we can confirm that there are no missing values in this dataset. ","date":"2019-07-12","objectID":"/post/eda-on-wine-quality-dataset/:4:1","tags":["machine-learning","eda"],"title":"Exploratory Data Analysis (EDA) on Wine Quality Prediction Dataset","uri":"/post/eda-on-wine-quality-dataset/"},{"categories":["Machine Learning"],"content":"4.2 Split Dataset We find from the EDA that the feature type is ordinal and affects almost all features, so we split the dataset into two, one with type 1 and other with type 2. ","date":"2019-07-12","objectID":"/post/eda-on-wine-quality-dataset/:4:2","tags":["machine-learning","eda"],"title":"Exploratory Data Analysis (EDA) on Wine Quality Prediction Dataset","uri":"/post/eda-on-wine-quality-dataset/"},{"categories":["Machine Learning"],"content":"4.3 Outliers Removal There are several outliers detection methods. We applied Inter Quartile Range (IQR) method to remove outliers. ","date":"2019-07-12","objectID":"/post/eda-on-wine-quality-dataset/:4:3","tags":["machine-learning","eda"],"title":"Exploratory Data Analysis (EDA) on Wine Quality Prediction Dataset","uri":"/post/eda-on-wine-quality-dataset/"},{"categories":["Machine Learning"],"content":"4.4 Feature Selection We applied SelectKBest with chi2 scoring function from sklearn [2] and found that volatile acidity, citric acid, free sulfur dioxide, total sulfur dioxide, and alcohol are the top five features for this dataset. We also applied Recursive Feature Selection using logistic regression and Extra Trees Classifier for finding the best useful features for determining the quality of wines. Observing the results from feature selection methods, we select alcohol, total sulfur dioxide, sulphates, volatile acidity, density, residual sugar, chlorides, pH, and free sulfur dioxide as features for type 1 wines and alcohol, volatile acidity, density, free sulfur dioxide, total sulfur dioxide, residual sugar, sulphates, and chlorides for type 2 wines. ","date":"2019-07-12","objectID":"/post/eda-on-wine-quality-dataset/:4:4","tags":["machine-learning","eda"],"title":"Exploratory Data Analysis (EDA) on Wine Quality Prediction Dataset","uri":"/post/eda-on-wine-quality-dataset/"},{"categories":["Machine Learning"],"content":"5. Modeling Classifier We can find the solution using a regression model since the outcomes range from 3 to 9, as well as classification model since we can define the outcomes as some certain classes. We design both kinds of models, and find that only tree based classifiers perform well, particularly Extra Trees classifier and Random Forest classifier outperform all other existing kinds of regressors and classifiers. For type 1 wines, Random Forest Classifier gives the best MAE and for type 2 wines, Extra Trees Classifier gives the best MAE. Parameters for both types are given below: number of estimators=500 min samples leaf=1 We can observe the Cross Validation Mean (CVM) and MAE scores in the table 3. ","date":"2019-07-12","objectID":"/post/eda-on-wine-quality-dataset/:5:0","tags":["machine-learning","eda"],"title":"Exploratory Data Analysis (EDA) on Wine Quality Prediction Dataset","uri":"/post/eda-on-wine-quality-dataset/"},{"categories":["Machine Learning"],"content":"6. Conclusion We experiment with different types of classification and regression models for this task. The best MAE score we find with this dataset is 0.336819. There are still plenty of scopes to experiment with the data, specially in depth exploratory data analysis could help understand the data more accurately. ","date":"2019-07-12","objectID":"/post/eda-on-wine-quality-dataset/:6:0","tags":["machine-learning","eda"],"title":"Exploratory Data Analysis (EDA) on Wine Quality Prediction Dataset","uri":"/post/eda-on-wine-quality-dataset/"},{"categories":["Machine Learning"],"content":"7. References [1] EDA - Wikipedia: https://en.wikipedia.org/wiki/Exploratory_data_analysis [2] sklearn: https://scikit-learn.org ","date":"2019-07-12","objectID":"/post/eda-on-wine-quality-dataset/:7:0","tags":["machine-learning","eda"],"title":"Exploratory Data Analysis (EDA) on Wine Quality Prediction Dataset","uri":"/post/eda-on-wine-quality-dataset/"},{"categories":["AI"],"content":"Attention Is All You Need: The Transformer","date":"2019-06-12","objectID":"/post/attention-is-all-you-need/","tags":["deep-learning","ai","transformer"],"title":"Attention Is All You Need: The Transformer","uri":"/post/attention-is-all-you-need/"},{"categories":["AI"],"content":"Introduction The advent of deep learning over the past few years has opened a lot of possibilities regarding neural machine translation (NMT). Attention is all you need, also known as Transformer [1], has become the state-of-the-art in NMT, surpassing tradition recurrent neural network (RNN) based encoder-decoder architecture. A bunch of new architectures is now being built based on the transformer. I will discuss how NMT has evolved throughout the last couple of years, from the traditional RNN to the Transformer. Terminology Before describing, how NMT has evolved through different phase shifts, I want to briefly define the terminologies which have been used throughout this article. ","date":"2019-06-12","objectID":"/post/attention-is-all-you-need/:0:0","tags":["deep-learning","ai","transformer"],"title":"Attention Is All You Need: The Transformer","uri":"/post/attention-is-all-you-need/"},{"categories":["AI"],"content":"Deep Learning Deep learning is a sub-field of machine learning which is inspired by the structure and functions of the human brain. Typically, it has some inputs, outputs, and several hidden layers to perceive, process and deliver accordingly. In other words, deep learning is nothing but a group neural network algorithms which can imitate human learning style to some extent i.e. understanding patterns, recognize different persons, objects etc. Instead of neural electric signals, it uses numerical data converted from images, videos, texts, etc from the real world. We can visualize how data is pipe-lined through such architecture from figure 1. ","date":"2019-06-12","objectID":"/post/attention-is-all-you-need/:1:0","tags":["deep-learning","ai","transformer"],"title":"Attention Is All You Need: The Transformer","uri":"/post/attention-is-all-you-need/"},{"categories":["AI"],"content":"Natural Language Process (NLP) Language that we, as human, speak and write as our natural way of communication is called natural language, and when a computer, as a machine, needs that language to be interpreted for accomplishing any task, it processes the language for its own understanding and analysis employing algorithms, then we call such processing as natural language processing. NLP tasks mostly comprise of two major things, natural language understanding, and natural language generation. Speech recognition, topic modeling, sentiment analysis, translating human speech or writing from one language to another, and generating or imitating Shakespeare’s novel are few of the tasks that NLP has been dealing with. In figure 2, we can see a usage of natural language processing where the machine is trying to extract the user’s intention and important entities from the text. ","date":"2019-06-12","objectID":"/post/attention-is-all-you-need/:2:0","tags":["deep-learning","ai","transformer"],"title":"Attention Is All You Need: The Transformer","uri":"/post/attention-is-all-you-need/"},{"categories":["AI"],"content":"Machine Translation Using natural language processing, nowadays the computer is able to translate text or speech from a source language (i.e. German) to a target language (i.e. English). Automatic translation by machine is called machine translation (MT). We always expect the translated speech to be retained completely the same meaning as conveyed in the source language. As we all know, translating word by word, mostly doesn’t make any sense. Each language has its own grammar style. Moreover, people from a particular language don’t always maintain grammar, they can understand their aberrant use of language based on context only. So, the translator, whoever it is, either human or machine, needs to interpret and analyze all of the surrounding and the usage pattern of those words in different contexts along with expertise in grammar, syntax, semantics of the languages involved in translation. Machine translation algorithms can be categorized into two major systems: rule-based machine translation (RBMT) and Statistical machine translation (SMT). RBMT systems are formed on massive dictionaries and complex linguistic rules. Using these complex rule sets, it transfers the grammatical structure of the source language into the target language. On the other hand, SMT is built on the analysis of statistical translation models generated from monolingual and bilingual training data. Basically, this system completely relies on the data supplied to its algorithm for learning or generating the complex rules for its model. Since SMT algorithms take much less time than RBMT and can imitate the pattern of training data to generate target output, SMT technology is the clear winner in the area of machine translation. Neural Machine Translation Algorithms based on neural network, that learn a statistical model for machine translation is called neural machine translation (NMT). The pipeline of specialized systems used in statistical translation is no more needed in NMT. “Unlike the traditional phrase-based translation system which consists of many small sub-components that are tuned separately, neural machine translation attempts to build and train a single, large neural network that reads a sentence and outputs a correct translation” [4]. As such, NMT systems are called end-to-end modeling for machine translation. Deep Neural Machine Translation It is an addition of Neural Machine Translation. Unlike the traditional NMT, deep NMT processes multiple neural network layers instead of just one. As a result, we experienced the best machine translation quality ever produced before it. Figure 3 shows how Google Translate [5] is helping people translate text from one language to another. Deep Learning in Machine Translation In this section, I would like to discuss how machine translation evolved from the very beginning of deep learning until Transformer takes place and gains superiority among all of those algorithms. ","date":"2019-06-12","objectID":"/post/attention-is-all-you-need/:3:0","tags":["deep-learning","ai","transformer"],"title":"Attention Is All You Need: The Transformer","uri":"/post/attention-is-all-you-need/"},{"categories":["AI"],"content":"Recurrent Neural Networks in NMT Recurrent Neural Networks (RNNs) are popular models that have exhibited excellent promise in numerous NLP tasks. Mostly RNNs are used in sequential data i.e. text, audio, signals etc. So, the idea behind RNNs is to make use of sequential information. In a conventional neural network, each input is independent of other inputs. But, tasks involving sequential dependency cannot be solved assuming such independence. For example, If we want to predict the next word in a sentence, we better know which words came before it. Being said that, there comes the concept of recurrent neural networks where are they perform the same task for every element of a sequence, with the output being dependent on the previous computations or outputs. In other words, RNNs have “memory” cells which gain information about what has been seen so far. Theoretically, RNNs can make use of information in arbitrarily long sequences, but in practice, they are limited to looking back only a few steps because of time and memory limitations. Figure 4 shows a typical RNN architecture. In terms of machine translation, more often we need to process long-term information which has to sequentially travel through all cells before getting to the present processing cell. This means it can be easily corrupted by being multiplied so many times by small numbers. This is the cause of vanishing gradients. RNNs have difficulties learning long-range dependencies and interactions between words that are several steps apart. That’s problematic because the meaning of an English sentence is often determined by words that aren’t very close: “The man who wore a wig on his head went inside”. The sentence is really about a man going inside, not about the wig. But it’s unlikely that a plain RNN would be able to capture such information. ","date":"2019-06-12","objectID":"/post/attention-is-all-you-need/:4:0","tags":["deep-learning","ai","transformer"],"title":"Attention Is All You Need: The Transformer","uri":"/post/attention-is-all-you-need/"},{"categories":["AI"],"content":"Gated RNNs in NMT Gated recurrent networks such as those composed of Long Short-Term Memory (LSTM) nodes are other improved versions of RNNs which have been called state-of-the-art in many supervised sequential processing tasks such as speech recognition and machine translation for quite a long time until the other advanced versions have taken place. As we already know, one major shortcoming of RNNs is not being efficient to maintain contexts for longer time sequences. The memory cell of an RNN is updated at each time step with new feedforward inputs. This means that the network does not have control of what and how much context to maintain over time. Another reason behind this problem is that when RNNs are trained with backpropagation through time, they are not able to properly assign gradients to previous time steps due to squashing non-linearities. This is called the vanishing gradient problem. LSTMs were designed to overcome the vanishing gradient problem by controlling gradient flow using extra control logic and by providing extra linear path-ways to transfer gradient without squashing. [9] Gated Recurrent Unit (GRU) is another kind of approach having the same goal of tracking long-term dependencies effectively while mitigating the vanishing/exploding gradient problems. Figures 5 and 6 show basic LSTM and GRU units respectively. These kinds of approaches have contributed a lot in the area of sequence encoding and helped improving vanishing gradient problem as well as uncertainty about remembering long term dependencies to some extent. These approaches do better when the source and target language maintain almost similar word order. On the other hand, gated neural networks still prohibit parallelization. Long-range dependency issue is not completely solved for long texts. Since these approaches use an encoder-decoder architecture in which target sequence is generated only from the last encoded vector. ","date":"2019-06-12","objectID":"/post/attention-is-all-you-need/:5:0","tags":["deep-learning","ai","transformer"],"title":"Attention Is All You Need: The Transformer","uri":"/post/attention-is-all-you-need/"},{"categories":["AI"],"content":"Convolutional Neural Networks in NMT Convolutional Neural Networks (CNNs) can solve some of the problems that were not resolved. Layer-wise parallelization is possible due to CNN’s trivial architecture [11]. Each source word can be processed at the same time and does not necessarily depend on the previous words to be translated. In addition to that the algorithm for capturing these dependencies scales in O(n/k) instead of O(n) due to the hierarchical structure. Figure 7 shows how WaveNet is structured. On the contrary, CNNs needs left-padding for texts. The complexity of O(n) for ConvS2S and O(nlogn) for ByteNet makes it harder to learn dependencies on distant positions. ","date":"2019-06-12","objectID":"/post/attention-is-all-you-need/:6:0","tags":["deep-learning","ai","transformer"],"title":"Attention Is All You Need: The Transformer","uri":"/post/attention-is-all-you-need/"},{"categories":["AI"],"content":"Attention-based RNNS in NMT The attention mechanism was born to help memorize long source sentences in NMT [4]. Rather than building a single context vector out of the encoder’s last hidden state, the secret sauce invented by attention is to create shortcuts between the context vector and the entire source input. The weights of these shortcut connections are customizable for each output element. While the context vector has access to the entire input sequence, we don’t need to worry about forgetting. The alignment between the source and target is learned and controlled by the context vector. Decoder attends to different parts of the source sequence at each step of the output generation. Each decoder output depends on a weighted combination of all the input states, not just the last state. And thus, the decoder knows whom to attend more than others (i.e “la Syrie” to “Syria” in figure 8). Figure 8 shows alignment matrix of source and corresponding target sentence. Attention comes at a cost, we need to calculate an attention value for each combination of input and output word i.e 50 words input sentence would take 2500 attention values to be calculated. Character level computations and dealing with other sequence modeling tasks would be expensive. Counter-intuitive compare to the human attention analogy. It scans all possible details before deciding which is memory intensive and also computationally expensive. Transformer The transformer reduces the number of sequential operations using a multi-head attention mechanism. It also eliminates the recurrence/convolution completely with attention and totally relied on self-attention based auto-regressive encoder-decoder, i.e. uses previously generated symbols as extra input while generating next symbol - ","date":"2019-06-12","objectID":"/post/attention-is-all-you-need/:7:0","tags":["deep-learning","ai","transformer"],"title":"Attention Is All You Need: The Transformer","uri":"/post/attention-is-all-you-need/"},{"categories":["AI"],"content":"Model Architecture We can divide the model into two sub-models, namely encoder, and decoder. Figure 9 shows the model architecture of the Transformer. ","date":"2019-06-12","objectID":"/post/attention-is-all-you-need/:8:0","tags":["deep-learning","ai","transformer"],"title":"Attention Is All You Need: The Transformer","uri":"/post/attention-is-all-you-need/"},{"categories":["AI"],"content":"Encoder The encoder is composed of a stack of N= 6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-wise fully connected feed-forward network. There is a residual connection around each of the two sub-layers, followed by layer normalization. That is, the output of each sub-layer isLayerNorm(x+Sublayer(x)), where Sublayer(x) is the function implemented by the sublayer itself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of dimension $d_{model}$= 512. ","date":"2019-06-12","objectID":"/post/attention-is-all-you-need/:8:1","tags":["deep-learning","ai","transformer"],"title":"Attention Is All You Need: The Transformer","uri":"/post/attention-is-all-you-need/"},{"categories":["AI"],"content":"Decoder The decoder is also composed of a stack of N= 6 identical layers. In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head attention over the output of the encoder stack. Similar to the encoder, there are residual connections around each of the sub-layers, followed by layer normalization. The self-attention sub-layer is modified in the decoder stack to prevent positions from attending to subsequent positions. This masking, combined with fact that the output embeddings are offset by one position, ensures that the predictions for the position i can depend only on the known outputs at positions less than i. Self-attention: Self-attention, also known as intra-attention, is an attention mechanism relating different positions of a single sequence in order to compute a representation of the same sequence. It has been shown to be very useful in machine reading, abstractive summarization, or image description generation. Multi-Head Attention: The multi-head mechanism runs through the scaled dot-product attention multiple times in parallel. The independent attention outputs are simply concatenated and linearly transformed into the expected dimensions. According to the paper, “Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions. With a single attention head, averaging inhibits this.” Figure 10 shows, how multi-head attention works in the Transformer. Masked Multi-Head Attention: This layer is from the decoder to prevent future words to be part of the attention i.e. at inference time, the decoder would not know about the future outputs. It zeroes-out the similarities between words and the words that appear after the source words (”in the future”). Simply removing such information, the only similarity to the preceding words is considered. Positional Encoding: Another important step on the Transformer is to add positional encoding when encoding each word. Encoding the position of each word is relevant, since the position of each word is relevant to the translation. Since the architecture has completely got rid of recurrence or convolutional sections, a positional encoding is required. Figure 11 shows the equation used for positional encoding in the Transformer. The overall flow of data from encoder’s input layers to the decoder’s output layers can be visualized by an unfolded network architecture shown in figure 12. Evaluation of the Transformer Authors conducted experiments on two machine translation tasks and claim that the Transformer models are superior in quality in terms of parallelization and less training runtime. Authors say, “The Transformer achieves 28.4 BLEU on the WMT 2014 English-to-German translation task, improving over the existing best results, including ensembles by over 2 BLEU. On the WMT 2014 English-to-French translation task, our model establishes a new single-model state-of-the-art BLEU score of 41.8 after training for 3.5 days on eight GPUs, a small fraction of the training costs of the best models from the literature.” They also show that the Transformer generalizes well to other tasks by applying it successfully to English constituency parsing both with large and limited training data. Figure 13 and 14 show the comparisons with other SOTA models in terms of BLEU scores, training runtime and FLOPS. Conclusion The Transformer is an advanced approach for machine translation using attention based layers. It introduces a completely new type of architecture namely self-attention layers. The model gets rid of convolutional or recurrent layers and still achieves state of the art on WMT14 English-German and English-French data sets. The model uses parallel attention layers whose outputs are concatenated and then fed to a feed-forward position-wise layer. The model is not only a great success in machine translation, but also created scopes to improve other NLP tasks. BERT","date":"2019-06-12","objectID":"/post/attention-is-all-you-need/:8:2","tags":["deep-learning","ai","transformer"],"title":"Attention Is All You Need: The Transformer","uri":"/post/attention-is-all-you-need/"},{"categories":["Time Series Analysis"],"content":"Time Series Analysis in Python - Introduction to ARIMA","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"What is Time Series? If we want to predict something in future i.e. stock prices, sales etc, we use time series analysis over past data. We can predict daily stock price, weekly interest rates, sales figure etc where the outcome varies over time. In such scenarios, we use time series forecasting. A time series is a set of observation taken at specified times usually at equal intervals. It is used to predict future values based on the previously observed values. By time series analysis we not only predict the future values but also able to understand past behavior, plan for the future and evaluate current accomplishment. ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:1:0","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"Componets of Time Series Trend: A trend exists when there is a long-term increase or decrease in the data. It does not have to be linear. It could go from an increasing trend to a decreasing trend. There is a trend in the antidiabetic drug sales data shown below. Source: otext.org Seasonality: A seasonal pattern occurs when a time series is affected by seasonal factors such as the time of the year or the day of the week. Seasonality is always of a fixed and known frequency. The monthly sales of antidiabetic drugs above show seasonality which is induced partly by the change in the cost of the drugs at the end of the calendar year. Irregularity: It is also called residual. These are erratic in nature, unsystematic, basically happens for short durations and not repeating. Let’s take an example. If there is a sudden natural disaster i.e flood in a town out of nowhere, a lot of people buy medicine and ointment and after sometime when everything settles down, sales of those ointments might go down. Nobody knows how many numbers of sales are going to happen that time and also cannot force the event not to happen. These type of random variations are called irregularity. Cyclic: A cycle occurs when the data exhibit rises and falls that are not of a fixed frequency. These fluctuations are usually due to economic conditions, and are often related to the “business cycle”. The duration of these fluctuations is usually at least 2 years. ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:2:0","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"When NOT to use Time Series? Time series is not applicable when- values are constant such as y = c. values are in the form of a function, such as y = sin(x), y = log(x). ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:3:0","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"What is Stationarity? Time series has a particular behavior over time, there is a very high probability that it will follow the same in the future. A stationary time series is one whose properties do not depend on the time at which the series is observed. Time series with trends (varying mean over time), or with seasonality (variations of a specific time frame), are not stationary — the trend and seasonality will affect the value of the time series at different times. On the other hand, a white noise series is stationary — it does not matter when you observe it, it should look much the same at any point in time. Some cases can be confusing — a time series with cyclic behavior (but with no trend or seasonality) is stationary. This is because the cycles are not of a fixed length, so before we observe the series we cannot be sure where the peaks and troughs of the cycles will be. In general, a stationary time series will have no predictable patterns in the long-term. Time plots will show the series to be roughly horizontal (although some cyclic behavior is possible), with constant variance. Figure 2: Which of these series are stationary? (a) Google stock price for 200 consecutive days; (b) Daily change in the Google stock price for 200 consecutive days; (c) Annual number of strikes in the US; (d) Monthly sales of new one-family houses sold in the US; (e) Annual price of a dozen eggs in the US (constant dollars); (f) Monthly total of pigs slaughtered in Victoria, Australia; (g) Annual total of lynx trapped in the McKenzie River district of north-west Canada; (h) Monthly Australian beer production; (i) Monthly Australian electricity production. Source: otext.org Consider the nine series plotted in Figure 2. Which of these do you think are stationary? Obvious seasonality rules out series (d), (h) and (i). Trends and changing levels rules out series (a), (c), (e), (f) and (i). Increasing variance also rules out (i). That leaves only (b) and (g) as stationary series. At first glance, the strong cycles in series (g) might appear to make it non-stationary. But these cycles are aperiodic. In the long-term, the timing of these cycles is not predictable. Hence the series is stationary. ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:4:0","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"How to Remove Stationarity? Following characteristics can be found in stationary time series. We have to get rid of those characteristics. Constant means according to the time Constant variance at different time intervals Autocovariance that does not depend on time i.e. correlation between values of any time interval t and their previous time intervals such as t-1, t-2 etc. ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:5:0","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"Tests to Check Stationarity Rolling Statistics Plot the moving average or moving variance and see if it varies with time. It’s more of a visual technique, not suitable for production. It can be used as POC (proof of concept) purpose. ADCF (Augmented Dickey-Fuller) Test The test starts with a null hypothesis that states that the time series is non-stationary, followed by some statistical results based on the hypothesis. The test results comprise of a Test Statistic Value and some Critical Values. We will go the rules that check stationarity in a time series later on in our example. More about this algorithm can be found here. ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:6:0","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"What is the ARIMA model? ARIMA stands for Auto-Regressive Integrated Moving Average ARIMA is one of the best models to work with time series data. Combination of two models, AR and MA AR (Auto-Regressive) model: Correlation between data in previous time steps and current time step. Parameterized with p, called autoregressive lags term. MA (Moving Average) model: Moving average to smoothen data and average the noises and irregularities. Parameterized with q, called moving average term. These two models are then integrated with a degree of differencing from previous p time intervals. ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:7:0","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"ACF and PACF To find p and q, we have to determine PACF and ACF which are autocorrelation function and partial autocorrelation function respectively of a time series. ACF is used to find autocorrelation between timestamp t and t-k where k = 1, 2, …, t-1. This allows the model to predict according to the trend. Again, PACF is also determined for the same purpose but over residuals to smoothen out noises. If you are interested to know some details of ACF and PACF, please refer to this link. ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:7:1","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"Example: Forecast Future Build a model to forecast the demand or passenger traffic in airplanes. The data is classified in date/time and the passengers traveling per month. Month #Passengers 1949-01-01 112 1949-02-01 118 1949-03-01 132 1949-04-01 129 1949-05-01 121 ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:8:0","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"Import necessary libraries We will be using numpy for matrix manipulation, pandas for loading dataset from csv, matplotlib to visualize some data in different formats i.e. graphs, charts etc. Also, we will be using some other libraries to perform statistical analysis later on. import numpy as np import pandas as pd import matplotlib.pylab as plt %matplotlib inline from matplotlib.pylab import rcParams rcParams['figure.figsize'] = 10, 61 ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:8:1","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"Load the dataset air-passengers.csv First, we need to convert date strings as python date time format. Also, we want to select Month as the index of this data table. dataset = pd.read_csv('data/air-passengers.csv') # parse strings to datetime type dataset['Month'] = pd.to_datetime(dataset['Month'], infer_datetime_format=True) indexed_data = dataset.set_index(['Month']) Let’s print some data from the beginning of the table. indexed_data.head(5) Month #Passengers 1949-01-01 112 1949-02-01 118 1949-03-01 132 1949-04-01 129 1949-05-01 121 Let’s plot this data as a graph with matplotlib. ## plot graph plt.xlabel(\"Date\") plt.ylabel(\"#Passengers\") plt.plot(indexed_data) ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:8:2","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"Check if the data is Stationary or not We will be using both rolling statistics and ADCF test for this purpose. Determining Rolling Statistics Since the dataset is monthly, we can set the rolling window as yearly (12 months), half-yearly (6 months) or even quarterly (4 months). We will be using 12 months or 12 rows for this case to determine the means, standard deviations and check if they are constant or not. # Determining rolling statistics rolling_mean = indexed_data.rolling(window=12).mean() rolling_std = indexed_data.rolling(window=12).std() print rolling_mean, rolling_std Month #Passengers 1949-01-01 NaN 1949-02-01 NaN 1949-03-01 NaN 1949-04-01 NaN 1949-05-01 NaN 1949-06-01 NaN 1949-07-01 NaN 1949-08-01 NaN 1949-09-01 NaN 1949-10-01 NaN 1949-11-01 NaN 1949-12-01 126.666667 1950-01-01 126.916667 1950-02-01 127.583333 1950-03-01 128.333333 1950-04-01 128.833333 1950-05-01 129.166667 1950-06-01 130.333333 1950-07-01 132.166667 1950-08-01 134.000000 1950-09-01 135.833333 1950-10-01 137.000000 1950-11-01 137.833333 1950-12-01 139.666667 1951-01-01 142.166667 1951-02-01 144.166667 1951-03-01 147.250000 1951-04-01 149.583333 1951-05-01 153.500000 1951-06-01 155.916667 ... ... 1958-07-01 59.590013 1958-08-01 65.557054 1958-09-01 65.557054 1958-10-01 65.106207 1958-11-01 64.593074 1958-12-01 64.530472 1959-01-01 63.627229 1959-02-01 61.759553 1959-03-01 61.597422 1959-04-01 60.284678 1959-05-01 60.008270 1959-06-01 63.009138 1959-07-01 71.987951 1959-08-01 80.049369 1959-09-01 81.485451 1959-10-01 79.680422 1959-11-01 74.498729 1959-12-01 69.830097 1960-01-01 66.624399 1960-02-01 61.866180 1960-03-01 61.382741 1960-04-01 60.171472 1960-05-01 60.184565 1960-06-01 65.021849 1960-07-01 77.194510 1960-08-01 83.630500 1960-09-01 84.617276 1960-10-01 82.541954 1960-11-01 79.502382 1960-12-01 77.737125 [144 rows x 1 columns] We will see that the first 11 rows have NaN values. We took means and standard deviations over every 12 rows from the beginning. Since these rows don’t fulfill the rolling window, we have got data starting from the 12th row. Let’s plot these rolling statistics. # Plot rolling statistics orig = plt.plot(indexed_data, color='blue', label='Original') mean = plt.plot(rolling_mean, color='red', label='Rolling Mean') std = plt.plot(rolling_std, color='black', label='Rolling Std') plt.legend(loc='best') plt.title('Rolling Mean \u0026 Standard Deviation') plt.show(block=False) We can see that the means and standard deviations are not constant and we can say that this time series is not stationary. ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:8:3","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"Perform Dicky-Fuller Test We will be using statsmodels library for this purpose. The adfuller test will give us the following data- Test Statistic p-value Number of lags used Number of observations used If we don’t want to dive into the details of Dicky-Fuller algorithm and just want to know whether the time series is stationary or not from this test results, then we can see the summary of the algorithm below- If p-value \u003e 0.05: The data is non-stationary. p-value \u003c= 0.05: The data is stationary. If test statistic value is significantly less than critical values (possibly less than 1% of critical values): The data is stationary. test statistic value is greater than critical values: The data is non-stationary. # Perform Dicky-Fuller test from statsmodels.tsa.stattools import adfuller print 'Result of Dicky=Fuller Test' dftest = adfuller(indexed_data['#Passengers'], autolag='AIC') dfoutput = pd.Series(dftest[0:4], index=['Test Statistic', 'p-value', '#Lags Used', '#Observations Used']) for key, value in dftest[4].items(): dfoutput['Critical Value (%s)'%key] = value print(dfoutput) Result of Dicky=Fuller Test Test Statistic 0.815369 p-value 0.991880 #Lags Used 13.000000 #Observations Used 130.000000 Critical Value (5%) -2.884042 Critical Value (1%) -3.481682 Critical Value (10%) -2.578770 dtype: float64 In summary, we can say that the data is non-stationary since from adfuller test we can see that p-value is greater than 0.05 and statistic value is greater than critical values. ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:8:4","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"Formalize Stationarity Checking in a Function We can now formalize the stationarity checking scripts using a function test_stationarity. We will perform both rolling statistics and ADFC test to check stationarity. from statsmodels.tsa.stattools import adfuller def test_stationarity(timeseries): # Determinign rolling statistics rolling_mean = timeseries.rolling(window=12).mean() rolling_std = timeseries.rolling(window=12).std() # Plot rolling statistics orig = plt.plot(timeseries, color='blue', label='Original') mean = plt.plot(rolling_mean, color='red', label='Rolling Mean') std = plt.plot(rolling_std, color='black', label='Rolling Std') plt.legend(loc='best') plt.title('Rolling Mean \u0026 Standard Deviation') plt.show(block=False) print 'Result of Dicky=Fuller Test' dftest = adfuller(timeseries['#Passengers'], autolag='AIC') dfoutput = pd.Series(dftest[0:4], index=['Test Statistic', 'p-value', '#Lags Used', '#Observations Used']) for key, value in dftest[4].items(): dfoutput['Critical Value (%s)'%key] = value print(dfoutput) ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:8:5","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"Make The Data Stationary There are several ways to make the data stationary, but it totally depends on the data. For this case, we can take the log scale data and subtract moving average from that to make it somewhat stationary. # Estimating trend indexed_data_log_scale = np.log(indexed_data) moving_average = indexed_data_log_scale.rolling(window=12).mean() moving_std = indexed_data_log_scale.rolling(window=12).mean() plt.plot(indexed_data_log_scale) plt.plot(moving_average, color='red') dataset_log_scale_minus_moving_average = indexed_data_log_scale - moving_average dataset_log_scale_minus_moving_average.dropna(inplace=True) dataset_log_scale_minus_moving_average.head(12) Month #Passengers 1949-12-01 -0.065494 1950-01-01 -0.093449 1950-02-01 -0.007566 1950-03-01 0.099416 1950-04-01 0.052142 1950-05-01 -0.027529 1950-06-01 0.139881 1950-07-01 0.260184 1950-08-01 0.248635 1950-09-01 0.162937 1950-10-01 -0.018578 1950-11-01 -0.180379 Now call this function with our newly transformed data. test_stationarity(dataset_log_scale_minus_moving_average) Result of Dicky=Fuller Test Test Statistic -3.162908 p-value 0.022235 #Lags Used 13.000000 #Observations Used 119.000000 Critical Value (5%) -2.886151 Critical Value (1%) -3.486535 Critical Value (10%) -2.579896 This is better than original and looks little bit stationary and adfuller test also suggests that this transformed series is stationary. Let’s do some other type of transformations to make it more stationary. We can start with subtracting exponentially weighted average from log scaled values and check again its stationarity. dataset_log_scale_ewm = indexed_data_log_scale.ewm(halflife=12, min_periods=0, adjust=True).mean() dataset_log_scale_minus_ewm = indexed_data_log_scale - dataset_log_scale_ewm test_stationarity(dataset_log_scale_minus_ewm) Result of Dicky=Fuller Test Test Statistic -3.601262 p-value 0.005737 #Lags Used 13.000000 #Observations Used 130.000000 Critical Value (5%) -2.884042 Critical Value (1%) -3.481682 Critical Value (10%) -2.578770 So both of the above transformations can make the data stationary. Now let’s start working on finding p, d and q to feed in our ARIMA model. First of all, let’s get first order differences. dataset_log_first_order_diff = indexed_data_log_scale - indexed_data_log_scale.shift() dataset_log_first_order_diff.dropna(inplace=True) test_stationarity(dataset_log_first_order_diff) Result of Dicky=Fuller Test Test Statistic -2.717131 p-value 0.071121 #Lags Used 14.000000 #Observations Used 128.000000 Critical Value (5%) -2.884398 Critical Value (1%) -3.482501 Critical Value (10%) -2.578960 ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:8:6","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"Decompose into Trend, Seasonality and Residual Now, let’s decompose values into the trend, seasonal and residual components. We can do so using statsmodels.tsa.seasonal package. from statsmodels.tsa.seasonal import seasonal_decompose decomposition = seasonal_decompose(indexed_data_log_scale) trend = decomposition.trend seasonal = decomposition.seasonal residual = decomposition.resid plt.subplot(411) plt.plot(indexed_data_log_scale, label='Original') plt.legend(loc='best') plt.subplot(412) plt.plot(trend, label='Trend') plt.legend(loc='best') plt.subplot(413) plt.plot(seasonal, label='Seasonality') plt.legend(loc='best') plt.subplot(414) plt.plot(residual, label='Residuals') plt.legend(loc='best') plt.tight_layout() Now, we can test that if the residual is stationary or not using our test_stationarity functiuon. decomposed_log_data = residual decomposed_log_data.dropna(inplace=True) test_stationarity(decomposed_log_data) Result of Dicky=Fuller Test Test Statistic -6.332387e+00 p-value 2.885059e-08 #Lags Used 9.000000e+00 #Observations Used 1.220000e+02 Critical Value (5%) -2.885538e+00 Critical Value (1%) -3.485122e+00 Critical Value (10%) -2.579569e+00 dtype: float64 We can easily say that the residual is not stationary. Since MA component deals with residual, we have to transform this data to make it stationary, so that it smoothen it out to predict what will happen next. But for now, don’t worry about that since ACF and PACF curves will help us to find proper values of p and q, and feeding those into the ARIMA model will do the job for us. ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:8:7","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"Determine ACF and PACF Now, we know the value of d. We have to calculate the values of p and q. We can find these values from ACF and PACF graph. Let’s plot those graph. # ACF and PACF plots|: from statsmodels.tsa.stattools import acf, pacf lag_acf = acf(dataset_log_first_order_diff, nlags=20) lag_pacf = pacf(dataset_log_first_order_diff, nlags=20, method='ols') # Plot ACF plt.subplot(121) plt.plot(lag_acf) plt.axhline(y=0, linestyle='--', color='gray') plt.axhline(y=-1.96/np.sqrt(len(dataset_log_first_order_diff)), linestyle='--', color='gray') plt.axhline(y=1.96/np.sqrt(len(dataset_log_first_order_diff)), linestyle='--', color='gray') plt.title('ACF') # Plot PACF plt.subplot(122) plt.plot(lag_pacf) plt.axhline(y=0, linestyle='--', color='gray') plt.axhline(y=-1.96/np.sqrt(len(dataset_log_first_order_diff)), linestyle='--', color='gray') plt.axhline(y=1.96/np.sqrt(len(dataset_log_first_order_diff)), linestyle='--', color='gray') plt.title('PACF') plt.tight_layout() In order to calculate p and q, we have to check what is the value that cuts off its origin for the first time. Looking at PACF curve, we can see that at the time around 2, the first time curve cuts the horizontal axis, hence the value of p is 2 and similarly from ACF curve, we find that the value of q is also around 2. ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:8:8","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"Feed p, d, and q into ARIMA Model We have found the values of p, d, and q, which are 2, 1 and 2 respectively. Let’s fit our ARIMA model with these values. from statsmodels.tsa.arima_model import ARIMA #ARIMA Model model = ARIMA(indexed_data_log_scale, order=(2, 1, 2)) results_ARIMA = model.fit(disp=-1) plt.plot(dataset_log_first_order_diff) plt.plot(results_ARIMA.fittedvalues, color='red') plt.title('RSS: %.4f'% sum((results_ARIMA.fittedvalues-dataset_log_first_order_diff['#Passengers'])**2)) Text(0.5,1,'RSS: 1.0292') ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:8:9","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"Check If Fitted Values Depicts Original Curve Since we are working with first-order differences, we have to covert fitted values back to the real values. We went through the following sequence from given values to fitted values: Take logarithm of the values Take first-order differences of the values found in step no 1 So we have to reverse the process to predict the next values: Get back the first item from the log scaled values and place it at index 0 after shifting the fitted values once Take cumulative sum to get back logarithm scaled values Take exponentials of the values found in step no 2 # Get back to the state before differening predictions_ARIMA_log = pd.Series(indexed_data_log_scale.loc[indexed_data_log_scale.index[0]].append(results_ARIMA.fittedvalues).cumsum(), index=indexed_data_log_scale.index) # Get exponetials predictions_ARIMA = np.exp(predictions_ARIMA_log) # Plot predicted data vs original data plt.plot(indexed_data) plt.plot(predictions_ARIMA) If we don’t want to be bothered about all these conversions, well, we have a piece of good news. ARIMA model also can plot the fitted values efficiently, even for future time intervals. ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:8:10","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Time Series Analysis"],"content":"Predict and Plot Future Values Using The ARIMA Model Now, our dataset has 144 rows, that means 12 years’ values. If we want to plot the graph for next 1 year, we have to call plot_predict() function from ARIMA model with parameters 1 (start from the first row) and 204 (first 144 + new 5x12=60 rows). results_ARIMA.plot_predict(1,204) The forecast function from ARIMA model with parameter steps=60 will give us the new 60 values. future = results_ARIMA.forecast(steps=60) print np.exp(future[1]) [1.08746262 1.11348487 1.12264437 1.12415063 1.12415874 1.12461435 1.12481942 1.12500462 1.12776932 1.13582632 1.14879044 1.16321524 1.1753643 1.18334355 1.1874086 1.18900856 1.18956455 1.18988252 1.19041521 1.1917625 1.1946837 1.19956286 1.2059434 1.21268138 1.21858755 1.22299943 1.22591873 1.22776853 1.22906372 1.23024086 1.23166843 1.23368207 1.23651561 1.24016542 1.24433566 1.2485496 1.25236108 1.2555239 1.25803132 1.26004567 1.26179869 1.26352486 1.26543139 1.26767321 1.27031559 1.27330434 1.27647669 1.2796205 1.2825529 1.28517677 1.28749351 1.28957958 1.29155007 1.29352656 1.29561291 1.29787521 1.30032659 1.30292387 1.30558205 1.30820345] If you are looking for the full working code, here it is. Acknowledgement: I took help from several popular online blogs and video tutorials like simplilearn, edureka, machinelearningmastery, otext, just to name a few. I rephrased some sentences and would like to give them full credits. ","date":"2019-06-12","objectID":"/post/time-series-analysis-in-python-inroduction-to-arima/:8:11","tags":["python","arima","time-series"],"title":"Time Series Analysis in Python - Introduction to ARIMA","uri":"/post/time-series-analysis-in-python-inroduction-to-arima/"},{"categories":["Programming"],"content":"Articulation Point","date":"2018-07-16","objectID":"/post/articulation-point/","tags":["graph","algorithm","programming"],"title":"Artuculation Point","uri":"/post/articulation-point/"},{"categories":["Programming"],"content":" If a graph becomes disconnected after removal of any node (and its adjacent edges also) from the graph, then we call that node as an articulation point of the graph. In the picture, we can see that if the node d is removed, the graph is separated into two components. So it’s an articulation point. In other words, node v is an articulation point, if there are two such nodes u and w, v node is present in every possible paths from u to v. And the graph that does not have any articulation point, we call that a biconnected graph. How to find these points? One naive approach could be like following- Remove a node Run DFS or BFS to check if the graph is connected or not, if not then it’s an articulation point. Repeat 1 and 2 for all nodes. Complexity is O(V(V+E)). There is an efficient solution to this problem which is of O(V+E) complexity. To achieve this complexity we need to run a mandatory DFS. Let’s say, we have connected graph G. For each node v ∈ V : we will declare two matrices i.e. discovery[v], back[v]. discovery[v] is nothing but DFS number. That means, we will assign a number (i.e 1, 2, 3) by increasing order to each node when DFS traverses the graph. First, we will initialize back[v] by discovery[v]. Later on, while the graph will be traversed and backtracked we will change the value of back[v]. Let’s say v is a node while traversing the graph. There are two cases. If v is source from where we would like to start our traversal or v is any other node. Now the source is an articulation point if it has more than one child. For other nodes, v is an articulation point if it has child node w and back[w] \u003e= discovery[v]. We will illustrate these abstract conditions by simulation. Before that we can have a look into the pseudocode. Set visit[] array as unvisited for all node; Set artpoint[] boolean array as false; Set predfn = 0; Set child_of_root = 0; Call DFS (root); DFS(v) { Visit[v] = true; artpoint[v] = false; predfn = predfn + 1; discovery[v] = back[v] = predfn; for each edge (v, w) ∈ All Edges if (v, w) is a tree edge then DFS(w); if v = root then child_of_root++; if child_of_root = 2 then artpoint[root] = true; else if back[w] \u003c discovery[v] //Red Part back[v] = min (back[v], back[w]); else if back[w]\u003e= discovery[v] then artpoint[v]=true; else if (v, w) is is a back edge then back[v] = min (back[v], discovery[w]); //Blue part } Thus, traversing the whole graph we get four articulation points B, E, F and D. Java Implementation: http://sfuacm.wikia.com/wiki/Cut_Vertices_(Articulation_Points) Simple c++ implementation: http://ideone.com/7jCJ8Z (input termination system is EOF and i just printed either a node is articulation point or not, they may be repeatedly printed ) ","date":"2018-07-16","objectID":"/post/articulation-point/:0:0","tags":["graph","algorithm","programming"],"title":"Artuculation Point","uri":"/post/articulation-point/"},{"categories":["Programming"],"content":"Basic Programming Interview Question Answers","date":"2018-07-15","objectID":"/post/basic-programming-interview-questions/","tags":["interview","programming"],"title":"Basic Programming Interview Question Answers","uri":"/post/basic-programming-interview-questions/"},{"categories":["Programming"],"content":"This is a simple collection of problems for interview from the basic knowledge of C programming. ","date":"2018-07-15","objectID":"/post/basic-programming-interview-questions/:0:0","tags":["interview","programming"],"title":"Basic Programming Interview Question Answers","uri":"/post/basic-programming-interview-questions/"},{"categories":["Programming"],"content":"Part 1: Write Short Procedure or Pseudo-code Write a program to print numbers from 1 to 100 without using loops. Write a C program to swap two variables without using a temporary variable. What is the 8 queens problem? Write a C program to solve it? Write a C program to print a square matrix helicaly. Write a C program to reverse a string. Write a C program generate permutations. Write a C program for calculating the factorial of a number. Write a C program to calculate pow(x,n)? How do you calculate the maximum sum of a list of numbers? How to generate fibonacci numbers with recurison? Can you optimize it? Solve the Rat In A Maze problem using backtracking. Write C code to solve the Tower of Hanoi problem (generalize form). Write a C program which produces its own source code as its output. Write a C program to convert from decimal to any base (binary, hex, oct etc…). Write C code to check if an integer is a power of 2 or not in a single line? Write a C program to find the GCD of two numbers. Write code to remove duplicates in a sorted array. Find the maximum of three integers using the ternary operator. Write C code to dynamically allocate one, two and three dimensional arrays (using malloc()). How would you find the size of structure without using sizeof()? Write a C program to multiply two matrices. Write a C program to check for palindromes. Write a C program to convert a decimal number into a binary number. Write C code to implement the Binary Search algorithm. How do you compare floating point numbers? Write a program to check if a given year is a leap year or not? Is there something we can do in C but not in C++? Can you write general sieve method for finding prime numbers? What is the difference between scanf(“%s”, str) and gets(str)? Write your own sqrt() function in C. How can we sum the digits of a given number in single statement? ","date":"2018-07-15","objectID":"/post/basic-programming-interview-questions/:0:1","tags":["interview","programming"],"title":"Basic Programming Interview Question Answers","uri":"/post/basic-programming-interview-questions/"},{"categories":["Programming"],"content":"Part 2: Find The Output 1. Find the output – int counter = 0, i; for(i=0;;i++) { if (i\u003c100) continue; counter ++; if (counter == 100) break; } printf(%d%d”,i, counter); 2. What is the value of EOF..?? Ans: -1 3. What is the output? class test{ }; int main() { cout\u003c\u003csizeof(test); return 0; } Ans: 1 4. What is the output? class test { static int x; int* ptr; } int main() { test t1; cout\u003c\u003csizeof(t1)\u003c\u003c \" \" \u003c\u003c sizeof(test); return 0; } Ans: 4 4 5. What is the output? char* fun() { return(\"samsung india\"); } main() { printf(\"%s\",printf(\"electronics\")+fun()); } Ans: electronicsia Explanation: printf(“electronics”) first print “electronics” and return a int value which the length of the string, that means 11, adding this 11 to the address of the “samsung india” will eventually point 11th character results in printing “ia”. 6. What is the output? main() { char* ptr={\"samsung\",\"electronics\",\"india\"}; char**ptr1; ptr1=ptr; *ptr1++; } Ans: 7. What is the output? main() { extern int i; { int i=20; printf(\"%d\",i); } } Ans: linker error 8. How to access the next element of arr? struct book arr\\[10\\]; Ans: Since arr is an array of 10 variables of book type, so to access the next element add the sizeof(struct) in the base address of the arr. 9. What is the output? main() { int i=10; switch(i) { printf(\"something here\"); case 10: printf(\"case10\"); break; case 5*2: printf(\"another case 10\";); break; default: printf(\"its default\"); } } Ans: case constant already used..10 and 5*2 are same..error ","date":"2018-07-15","objectID":"/post/basic-programming-interview-questions/:0:2","tags":["interview","programming"],"title":"Basic Programming Interview Question Answers","uri":"/post/basic-programming-interview-questions/"},{"categories":["Programming"],"content":"Part 3: OS Related Threads don’t share their ****___********with other threads. Ans: stack,register,and counter Advantage of using large pages and small pages in paging ****___****. Which program loads first when system starts? Ans: bootstrap loader. What does CPU do when interrupt occurs? Ans: CPU at once switches over it control to the interrupt. Technique used for avoiding page fault frequency? ans:locality of reference. ","date":"2018-07-15","objectID":"/post/basic-programming-interview-questions/:0:3","tags":["interview","programming"],"title":"Basic Programming Interview Question Answers","uri":"/post/basic-programming-interview-questions/"},{"categories":["Programming"],"content":"Part 4: Data Structure Recursive function uses more******__******than non recursive function. Ans: stack space. In heap each node is ___. Ans: each node is greater than its left and right child node. Complexity of binary search. Ans: nlognr Total no. of nodes in a full binary tree of 4 levels. Ans:15 ","date":"2018-07-15","objectID":"/post/basic-programming-interview-questions/:0:4","tags":["interview","programming"],"title":"Basic Programming Interview Question Answers","uri":"/post/basic-programming-interview-questions/"},{"categories":["Interview"],"content":"Data Structure Interview Question Answers","date":"2018-07-15","objectID":"/post/data-structure-questions/","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"1. What is data structure? A data structure is a way of organizing data that considers not only the items stored, but also their relationship to each other. Advance knowledge about the relationship between data items allows designing of efficient algorithms for the manipulation of data. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:1:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"2. List out the areas in which data structures are applied extensively? Compiler Design, Operating System, Database Management System, Statistical analysis package, Numerical Analysis, Graphics, Artificial Intelligence, Simulation ","date":"2018-07-15","objectID":"/post/data-structure-questions/:2:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"3. What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model. RDBMS = Array (i.e. Array of structures) Network data model = Graph Hierarchical data model = Trees ","date":"2018-07-15","objectID":"/post/data-structure-questions/:3:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"4. If you are using C language to implement the heterogeneous linked list, what pointer type will you use? The heterogeneous linked list contains different data types in its nodes and we need a link, pointer to connect them. It is not possible to use ordinary pointers for this. So we go for void pointer. Void pointer is capable of storing pointer to any type as it is a generic pointer type. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:4:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"5. Minimum number of queues needed to implement the priority queue? Two. One queue is used for actual storing of data and another for storing priorities. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:5:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"6. What is the data structures used to perform recursion? Stack. Because of its LIFO (Last In First Out) property it remembers its ‘caller’ so knows whom to return when the function has to return. Recursion makes use of system stack for storing the return addresses of the function calls. Every recursive function has its equivalent iterative (non-recursive) function. Even when such equivalent iterative procedures are written, explicit stack is to be used. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:6:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"7. Briefly explain recursive algorithm. Recursive algorithm targets a problem by dividing it into smaller, manageable sub-problems. The output of one recursion after processing one sub-problem becomes the input to the next recursive process. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:7:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"8. Convert the expression ((A + B) * C – (D – E) ^ (F + G)) to equivalent Prefix and Postfix notations. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:8:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"Prefix Notation:** – * +ABC ^ – DE + FG ","date":"2018-07-15","objectID":"/post/data-structure-questions/:9:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"Postfix Notation:** AB + C * DE – FG + ^ – ","date":"2018-07-15","objectID":"/post/data-structure-questions/:10:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"9. Sorting is not possible by using which of the following methods? (Insertion, Selection, Exchange, Deletion) ","date":"2018-07-15","objectID":"/post/data-structure-questions/:11:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"Sorting is not possible in Deletion.** Using insertion we can perform insertion sort, using selection we can perform selection sort, using exchange we can perform the bubble sort (and other similar sorting methods). But no sorting method can be done just using deletion. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:12:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"10. What are the methods available in storing sequential files ? Straight merging, Natural merging, Polyphase sort, Distribution of Initial runs. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:13:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"11. List out few of the Application of tree data-structure? The manipulation of Arithmetic expression, Symbol Table construction, Syntax analysis. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:14:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"12. List out few of the applications that make use of Multilinked Structures? Sparse matrix, Index generation. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:15:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"13. In tree construction which is the suitable efficient data structure? (Array, Linked list, Stack, Queue) Linked list is the suitable efficient data structure. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:16:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"14. What is the type of the algorithm used in solving the 8 Queens problem? Backtracking. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:17:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"15. In an AVL tree, at what condition the balancing is to be done? If the ‘pivotal value’ (or the ‘Height factor’) is greater than 1 or less than -1. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:18:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"16. What is the bucket size, when the overlapping and collision occur at same time? One. If there is only one entry possible in the bucket, when the collision occurs, there is no way to accommodate the colliding value. This results in the overlapping of values. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:19:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"17. Classify the Hashing Functions based on the various methods by which the key value is found. Direct method, Subtraction method, Modulo-Division method, Digit-Extraction method, Mid-Square method, Folding method, Pseudo-random method. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:20:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"18. What are the types of Collision Resolution Techniques and the methods used in each of the type? ","date":"2018-07-15","objectID":"/post/data-structure-questions/:21:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"Open addressing (closed hashing),** The methods used include: Overflow block. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:22:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"Closed addressing (open hashing),** The methods used include: Linked list, Binary tree. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:23:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"19. In RDBMS, what is the efficient data structure used in the internal storage representation? B+ tree. Because in B+ tree, all the data is stored only in leaf nodes, that makes searching easier. This corresponds to the records that shall be stored in leaf nodes. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:24:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"20. What is a spanning Tree? A spanning tree is a tree associated with a network. All the nodes of the graph appear on the tree once. A minimum spanning tree is a spanning tree organized so that the total edge weight between nodes is minimized. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:25:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"21. Does the minimum spanning tree of a graph give the shortest distance between any 2 specified nodes? No. The Minimal spanning tree assures that the total weight of the tree is kept at its minimum. But it doesn’t mean that the distance between any two nodes involved in the minimum-spanning tree is minimum. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:26:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"22. Which is the simplest file structure? (Sequential, Indexed, Random) Sequential is the simplest file structure. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:27:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"23. Whether Linked List is linear or Non-linear data structure? According to Access strategies Linked list is a linear one. According to Storage Linked List is a Non-linear one. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:28:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"24. How to find middle element of linked list in one pass? One of the most popular question from data structures and algorithm, mostly asked on telephonic interview. Since many programmer know that, in order to find length of linked list we need to first traverse through linked list till we find last node, which is pointing to null, and then in second pass we can find middle element by traversing only half of length. They get confused when interviewer ask him to do same job in one pass. In order to find middle element of linked list in one pass you need to maintain two pointer, one increment at each node while other increments after two nodes at a time, by having this arrangement, when first pointer reaches end, second pointer will point to middle element of linked list. See this trick to find middle element of linked list in single pass for more details. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:29:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"25. What is data structure? Data structure refers to the way data is organized and manipulated. It seeks to find ways to make data access more efficient. When dealing with data structure, we not only focus on one piece of data, but rather different set of data and how they can relate to one another in an organized manner. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:30:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"26. Differentiate file structure from storage structure. Basically, the key difference is the memory area that is being accessed. When dealing with the structure that resides the main memory of the computer system, this is referred to as storage structure. When dealing with an auxiliary structure, we refer to it as file structure. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:31:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"27. When is a binary search best applied? A binary search is an algorithm that is best applied to search a list when the elements are already in order or sorted. The list is search starting in the middle, such that if that middle value is not the target search key, it will check to see if it will continue the search on the lower half of the list or the higher half. The split and search will then continue in the same manner. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:32:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"28. What is LIFO? LIFO is short for Last In First Out, and refers to how data is accessed, stored and retrieved. Using this scheme, data that was stored last , should be the one to be extracted first. This also means that in order to gain access to the first data, all the other data that was stored before this first data must first be retrieved and extracted. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:33:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"29. What is a queue? A queue is a data structure that can simulates a list or stream of data. In this structure, new elements are inserted at one end and existing elements are removed from the other end. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:34:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"30. What are binary trees? A binary tree is one type of data structure that has two nodes, a left node and a right node. In programming, binary trees are actually an extension of the linked list structures. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:35:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"31. Which data structure is applied when dealing with a recursive function? Recursion, which is basically a function that calls itself based on a terminating condition, makes use of the stack. Using LIFO, a call to a recursive function saves the return address so that it knows how to return to the calling function after the call terminates. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:36:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"32. What is a stack? A stack is a data structure in which only the top element can be accessed. As data is stored in the stack, each data is pushed downward, leaving the most recently added data on top. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:37:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"33. Explain Binary Search Tree A binary search tree stores data in such a way that they can be retrieved very efficiently. The left subtree contains nodes whose keys are less than the node’s key value, while the right subtree contains nodes whose keys are greater than or equal to the node’s key value. Moreover, both subtrees are also binary search trees. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:38:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"34. What are multidimensional arrays? Multidimensional arrays make use of multiple indexes to store data. It is useful when storing data that cannot be represented using a single dimensional indexing, such as data representation in a board game, tables with data stored in more than one column. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:39:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"35. Are linked lists considered linear or non-linear data structure? It actually depends on where you intend to apply linked lists. If you based it on storage, a linked list is considered non-linear. On the other hand, if you based it on access strategies, then a linked list is considered linear. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:40:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"36. How does dynamic memory allocation help in managing data? Aside from being able to store simple structured data types, dynamic memory allocation can combine separately allocated structured blocks to form composite structures that expand and contract as needed. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:41:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"37. What is FIFO? FIFO is short for First-in, First-out, and is used to represent how data is accessed in a queue. Data has been inserted into the queue list the longest is the one that is removed first. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:42:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"38. What is merge sort? Merge sort takes a divide-and-conquer approach to sorting data. In a sequence of data, adjacent ones are merged and sorted to create bigger sorted lists. These sorted lists are then merged again to form an even bigger sorted list, which continuous until you have one single sorted list. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:43:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"39. Differentiate NULL and VOID. Null is actually a value, whereas Void is a data type identifier. A variable that is given a Null value simply indicates an empty value. Void is used to identify pointers as having no initial size. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:44:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"40. What is the primary advantage of a linked list? A linked list is a very ideal data structure because it can be modified easily. This means that modifying a linked list works regardless of how many elements are in the list. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:45:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"41. What is a linear search? A linear search refers to the way a target key is being searched in a sequential data structure. Using this method, each element in the list is checked and compared against the target key, and is repeated until found or if the end of the list has been reached. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:46:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"42. How does variable declaration affect memory allocation? The amount of memory to be allocated or reserved would depend on the data type of the variable being declared. For example, if a variable is declared to be of integer type, then 32 bits of memory storage will be reserved for that variable. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:47:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"44. What is the advantage of the heap over a stack? Basically, the heap is more flexible than the stack. That’s because memory space for the heap can be dynamically allocated and de-allocated as needed. However, memory of the heap can at times be slower when compared to that stack. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:48:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"45. What is a postfix expression? A postfix expression is an expression in which each operator follows its operands. The advantage of this form is that there is no need to group sub-expressions in parentheses or to consider operator precedence. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:49:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"46. What is Data abstraction? Data abstraction is a powerful tool for breaking down complex data problems into manageable chunks. This is applied by initially specifying the data objects involved and the operations to be performed on these data objects without being overly concerned with how the data objects will be represented and stored in memory. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:50:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"47. How do you insert a new item in a binary search tree? Assuming that the data to be inserted is a unique value (that is, not an existing entry in the tree), check first if the tree is empty. If it’s empty, just insert the new item in the root node. If it’s not empty, refer to the new item’s key. If it’s smaller than the root’s key, insert it into the root’s left subtree, otherwise, insert it into the root’s right subtree. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:51:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"48. How does a selection sort work for an array? The selection sort is a fairly intuitive sorting algorithm,, though not necessarily efficient. To perform this, the smallest element is first located and switched with the element at subscript zero, thereby placing the smallest element in the first position. The smallest element remaining in the subarray is then located next with subscripts 1 through n-1 and switched with the element at subscript 1, thereby placing the second smallest element in the second position. The steps are repeated in the same manner till the last element. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:52:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"49. How do signed and unsigned numbers affect memory? In the case of signed numbers, the first bit is used to indicate whether positive or negative, which leaves you with one bit short. With unsigned numbers, you have all bits available for that number. The effect is best seen in the number range (unsigned 8 bit number has a range 0-255, while 8-bit signed number has a range -128 to +127. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:53:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"50. What is the minimum number of nodes that a binary tree can have? A binary tree can have a minimum of zero nodes, which occurs when the nodes have NULL values. Furthermore, a binary tree can also have 1 or 2 nodes. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:54:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"51. What are dynamic data structures? Dynamic data structures are structures that expand and contract as a program runs. It provides a flexible means of manipulating data because it can adjust according to the size of the data. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:55:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"52. Do all declaration statements result in a fixed reservation in memory? Most declarations do, with the exemption of pointers. Pointer declaration does not allocate memory for data, but for the address of the pointer variable. Actual memory allocation for the data comes during run-time. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:56:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"53. What is the minimum number of queues needed when implementing a priority queue? The minimum number of queues needed in this case is two. One queue is intended for sorting priorities while the other queue is intended for actual storage of data. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:57:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"54. Which sorting algorithm is considered the fastest? There are many types of sorting algorithms: quick sort, bubble sort, balloon sort, radix sort, merge sort, etc. Not one can be considered the fastest because each algorithm is designed for a particular data structure and data set. It would depend on the data set that you would want to sort. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:58:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"55. Differentiate STACK from ARRAY. Data that is stored in a stack follows a LIFO pattern. This means that data access follows a sequence wherein the last data to be stored will the first one to be extracted. Arrays, on the other hand, does not follow a particular order and instead can be accessed by referring to the indexed element within the array. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:59:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"56. Give a basic algorithm for searching a binary search tree. if the tree is empty, then the target is not in the tree, end search if the tree is not empty, the target is in the tree check if the target is in the root item if target is not in the root item, check if target is smaller than the root’s value if target is smaller than the root’s value, search the left subtree else, search the right subtree ","date":"2018-07-15","objectID":"/post/data-structure-questions/:60:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"57. What is a dequeue? A dequeue is a double-ended queue. This is a structure wherein elements can be inserted or removed from either end. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:61:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"58. What is a bubble sort and how do you perform it? A bubble sort is one sorting technique that can be applied to data structures such as an array. It works by comparing adjacent elements and exchanges their values if they are out of order. This method lets the smaller values “bubble” to the top of the list, while the larger value sinks to the bottom. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:62:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"59. How does selection sort work? Selection sort works by picking the smallest number from the list and placing it at the front. This process is repeated for the second position towards the end of the list. It is the simplest sort algorithm. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:63:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"60. What is a graph? A graph is one type of data structure that contains a set of ordered pairs. These ordered pairs are also referred to as edges or arcs, and are used to connect nodes where data can be stored and retrieved. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:64:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"61. Differentiate linear from non linear data structure. Linear data structure is a structure wherein data elements are adjacent to each other. Examples of linear data structure include arrays, linked lists, stacks and queues. On the other hand, non-linear data structure is a structure wherein each data element can connect to more than two adjacent data elements. Examples of non linear data structure include trees and graphs. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:65:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"62. What is an AVL tree? An AVL tree is a type of binary search tree that is always in a state of partially balanced. The balance is measured as a difference between the heights of the subtrees from the root. This self-balancing tree was known to be the first data structure to be designed as such. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:66:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"63. What are doubly linked lists? Doubly linked lists are a special type of linked list wherein traversal across the data elements can be done in both directions. This is made possible by having two links in every node, one that links to the next node and other one that links to the previous node. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:67:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"64. What is Huffman’s algorithm? Huffman’s algorithm is associated in creating extended binary trees that has minimum weighted path lengths from the given weights. It makes use of a table that contains frequency of occurrence for each data element. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:68:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"65. What is Fibonacci search? Fibonacci search is a search algorithm that applies to a sorted array. It makes use of a divide-and-conquer approach that can greatly reduce the time needed in order to reach the target element. ","date":"2018-07-15","objectID":"/post/data-structure-questions/:69:0","tags":["interview","data-structure"],"title":"Data Structure Interview Question Answers","uri":"/post/data-structure-questions/"},{"categories":["Interview"],"content":"Database Interview Questions","date":"2018-07-15","objectID":"/post/database-interview-questions/","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"1. What is database or database management systems (DBMS)? and – What’s the difference between file and database? Can files qualify as a database? Database provides a systematic and organized way of storing, managing and retrieving from 1 collection of logically related information. Secondly the information has to be persistent, that means even after the application is closed the information should be persisted. Finally it should provide an independent way of accessing data and should not be dependent on the application to access the information. Main difference between a simple file and database that database has independent way (SQL) of accessing information while simple files do not File meets the storing, managing and retrieving part of a database but not the independent way of accessing data. Many experienced programmers think that the main difference is that file can not provide multi-user capabilities which a DBMS provides. But if we look at some old COBOL and C programs where file where the only means of storing data, we can see functionalities like locking, multi-user etc provided very efficiently. So it’s a matter of debate if some interviewers think this as a main difference between files and database accept it… going in to debate is probably loosing a job. ","date":"2018-07-15","objectID":"/post/database-interview-questions/:1:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"2. What is SQL ? SQL stands for Structured Query Language.SQL is an ANSI (American National Standards Institute) standard computer language for accessing and manipulating database systems. SQL statements are used to retrieve and update data in a database. ","date":"2018-07-15","objectID":"/post/database-interview-questions/:2:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"3. What is difference between DBMS and RDBMS ? DBMS provides a systematic and organized way of storing, managing and retrieving from collection of logically related information. RDBMS also provides what DBMS provides but above that it provides relationship integrity. So in short we can say RDBMS = DBMS + REFERENTIAL INTEGRITY These relations are defined by using “Foreign Keys” in any RDBMS.Many DBMS companies claimed there DBMS product was a RDBMS compliant, but according to industry rules and regulations if the DBMS fulfills the twelve CODD rules it’s truly a RDBMS. Almost all DBMS (SQL SERVER, ORACLE etc) fulfills all the twelve CODD rules and are considered as truly RDBMS. ","date":"2018-07-15","objectID":"/post/database-interview-questions/:3:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"5. What are E-R diagrams? E-R diagram also termed as Entity-Relationship diagram shows relationship between various tables in the database. . ","date":"2018-07-15","objectID":"/post/database-interview-questions/:4:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"6. How many types of relationship exist in database designing? There are three major relationship models:- One-to-one One-to-many Many-to-many ","date":"2018-07-15","objectID":"/post/database-interview-questions/:5:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"7. What are DML and DDL statements? DML stands for Data Manipulation Statements. They update data values in table. Below are the most important DDL statements:- =\u003e SELECT – gets data from a database table =\u003e UPDATE – updates data in a table =\u003e DELETE – deletes data from a database table =\u003e INSERT INTO – inserts new data into a database table DDL stands for Data definition Language. They change structure of the database objects like table, index etc. Most important DDL statements are as shown below:- =\u003e CREATE TABLE – creates a new table in the database. =\u003e ALTER TABLE – changes table structure in database. =\u003eDROP TABLE – deletes a table from database =\u003e CREATE INDEX – creates an index =\u003e DROP INDEX – deletes an index ","date":"2018-07-15","objectID":"/post/database-interview-questions/:6:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"8. How do we select distinct values from a table? DISTINCT keyword is used to return only distinct values. Below is syntax:- Column age and Table pcdsEmp SELECT DISTINCT age FROM pcdsEmp ","date":"2018-07-15","objectID":"/post/database-interview-questions/:7:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"9. What is Like operator for and what are wild cards? LIKE operator is used to match patterns. A “%” sign is used to define the pattern. Below SQL statement will return all words with letter “S” SELECT * FROM pcdsEmployee WHERE EmpName LIKE ‘S%’ Below SQL statement will return all words which end with letter “S” SELECT * FROM pcdsEmployee WHERE EmpName LIKE ‘%S’ Below SQL statement will return all words having letter “S” in between SELECT * FROM pcdsEmployee WHERE EmpName LIKE ‘%S%’ “” operator (we can read as “Underscore Operator”). “” operator is the character defined at that point. In the below sample fired a query Select name from pcdsEmployee where name like ‘_s%’ So all name where second letter is “s” is returned. ","date":"2018-07-15","objectID":"/post/database-interview-questions/:8:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"10. Can you explain Insert, Update and Delete query? Insert statement is used to insert new rows in to table. Update to update existing data in the table. Delete statement to delete a record from the table. Below code snippet for Insert, Update and Delete :- INSERT INTO pcdsEmployee SET name=’rohit’,age=’24’; UPDATE pcdsEmployee SET age=’25’ where name=’rohit’; DELETE FROM pcdsEmployee WHERE name = ‘sonia’; ","date":"2018-07-15","objectID":"/post/database-interview-questions/:9:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"11. What is order by clause? ORDER BY clause helps to sort the data in either ascending order to descending order. Ascending order sort query: SELECT name,age FROM pcdsEmployee ORDER BY age ASC Descending order sort query: SELECT name FROM pcdsEmployee ORDER BY age DESC ","date":"2018-07-15","objectID":"/post/database-interview-questions/:10:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"12. What is the SQL ” IN ” clause? SQL IN operator is used to see if the value exists in a group of values. For instance the below SQL checks if the Name is either ‘rohit’ or ‘Anuradha’ SELECT * FROM pcdsEmployee WHERE name IN (‘Rohit’,’Anuradha’) Also you can specify a not clause with the same. SELECT * FROM pcdsEmployee WHERE age NOT IN (17,16) ","date":"2018-07-15","objectID":"/post/database-interview-questions/:11:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"13. Can you explain the between clause? Below SQL selects employees born between ’01/01/1975′ AND ’01/01/1978′ as per mysql SELECT * FROM pcdsEmployee WHERE DOB BETWEEN ‘1975-01-01’ AND ‘2011-09-28’ ","date":"2018-07-15","objectID":"/post/database-interview-questions/:12:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"14. we have an employee salary table how do we find the second highest from it? Below Sql Query find the second highest salary\" SELECT * FROM pcdsEmployeeSalary a WHERE (2=(SELECT COUNT(DISTINCT(b.salary)) FROM pcdsEmployeeSalary b WHERE b.salary\u003e=a.salary)) ","date":"2018-07-15","objectID":"/post/database-interview-questions/:13:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"15 What are different types of joins in SQL? INNER JOIN: Inner join shows matches only when they exist in both tables. Example in the below SQL there are two tables Customers and Orders and the inner join in made on Customers.Customerid and Orders.Customerid. So this SQL will only give you result with customers who have orders. If the customer does not have order it will not display that record. SELECT Customers.*, Orders.* FROM Customers INNER JOIN Orders ON Customers.CustomerID =Orders.CustomerID LEFT OUTER JOIN: Left join will display all records in left table of the SQL statement. In SQL below customers with or without orders will be displayed. Order data for customers without orders appears as NULL values. For example, you want to determine the amount ordered by each customer and you need to see who has not ordered anything as well. You can also see the LEFT OUTER JOIN as a mirror image of the RIGHT OUTER JOIN (Is covered in the next section) if you switch the side of each table. SELECT Customers.*, Orders.* FROM Customers LEFT OUTER JOIN Orders ON Customers.CustomerID =Orders.CustomerID RIGHT OUTER JOIN: Right join will display all records in right table of the SQL statement. In SQL below all orders with or without matching customer records will be displayed. Customer data for orders without customers appears as NULL values. For example, you want to determine if there are any orders in the data with undefined CustomerID values (say, after a conversion or something like it). You can also see the RIGHT OUTER JOIN as a mirror image of the LEFT OUTER JOIN if you switch the side of each table. SELECT Customers.*, Orders.* FROM Customers RIGHT OUTER JOIN Orders ON Customers.CustomerID =Orders.CustomerID ","date":"2018-07-15","objectID":"/post/database-interview-questions/:14:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"16. What is “CROSS JOIN”? or What is Cartesian product? “CROSS JOIN” or “CARTESIAN PRODUCT” combines all rows from both tables. Number of rows will be product of the number of rows in each table. In real life scenario I can not imagine where we will want to use a Cartesian product. But there are scenarios where we would like permutation and combination probably Cartesian would be the easiest way to achieve it. ","date":"2018-07-15","objectID":"/post/database-interview-questions/:15:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"17. How to select the first record in a given set of rows? SELECT TOP 1 * FROM sales.salesperson ","date":"2018-07-15","objectID":"/post/database-interview-questions/:16:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"18. What is the default “-SORT ” order for a SQL? ASCENDING ","date":"2018-07-15","objectID":"/post/database-interview-questions/:17:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"19.What is a self-join? If we want to join two instances of the same table we can use self-join. ","date":"2018-07-15","objectID":"/post/database-interview-questions/:18:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"20. at’s the difference between DELETE and TRUNCATE ? Following are difference between them: =\u003e DELETE table syntax logs the deletes thus making the delete operations low. TRUNCATE table does not log any information but it logs information about deallocation of data page of the table. So TRUNCATE table is faster as compared to delete table. =\u003e DELETE table can have criteria while TRUNCATE can not. =\u003e TRUNCATE table can not have triggers. ","date":"2018-07-15","objectID":"/post/database-interview-questions/:19:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"21. What’s the difference between “UNION” and “UNION ALL” ? SQL syntax is used to select information from two tables. But it selects only distinct records from both the table. , while UNION ALL selects all records from both the tables. ","date":"2018-07-15","objectID":"/post/database-interview-questions/:20:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"22. What is “Group by” clause? “Group by” clause group similar data so that aggregate values can be derived. ","date":"2018-07-15","objectID":"/post/database-interview-questions/:21:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"23. What is the difference between “HAVING” and “WHERE” clause? “HAVING” clause is used to specify filtering criteria for “GROUP BY”, while “WHERE” clause applies on normal SQL. ","date":"2018-07-15","objectID":"/post/database-interview-questions/:22:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"24. What is a Sub-Query? A query nested inside a SELECT statement is known as a subquery and is an alternative to complex join statements. A subquery combines data from multiple tables and returns results that are inserted into the WHERE condition of the main query. A subquery is always enclosed within parentheses and returns a column. A subquery can also be referred to as an inner query and the main query as an outer query. JOIN gives better performance than a subquery when you have to check for the existence of records. For example, to retrieve all EmployeeID and CustomerID records from the ORDERS table that have the EmployeeID greater than the average of the EmployeeID field, you can create a nested query, as shown: SELECT DISTINCT EmployeeID, CustomerID FROM ORDERS WHERE EmployeeID \u003e (SELECT AVG(EmployeeID) FROM ORDERS) ","date":"2018-07-15","objectID":"/post/database-interview-questions/:23:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"25. What are Aggregate and Scalar Functions? Aggregate and Scalar functions are in built function for counting and calculations. Aggregate functions operate against a group of values but returns only one value. AVG(column) : Returns the average value of a column COUNT(column) : Returns the number of rows (without a NULL value) of a column COUNT(*) : Returns the number of selected rows MAX(column) : Returns the highest value of a column MIN(column) : Returns the lowest value of a column Scalar functions operate against a single value and return value on basis of the single value. UCASE(c) : Converts a field to upper case LCASE(c) : Converts a field to lower case MID(c,start[,end]) : Extract characters from a text field LEN(c) : Returns the length of a text ","date":"2018-07-15","objectID":"/post/database-interview-questions/:24:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"26. Can you explain the SELECT INTO Statement? SELECT INTO statement is used mostly to create backups. The below SQL backsup the Employee table in to the EmployeeBackUp table. One point to be noted is that the structure of pcdsEmployeeBackup and pcdsEmployee table should be same. SELECT * INTO pcdsEmployeeBackup FROM pcdsEmployee ","date":"2018-07-15","objectID":"/post/database-interview-questions/:25:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"27. What is a View? View is a virtual table which is created on the basis of the result set returned by the select statement. CREATE VIEW [MyView] AS SELECT * from pcdsEmployee where LastName = ‘singh’ In order to query the view SELECT * FROM [MyView] ","date":"2018-07-15","objectID":"/post/database-interview-questions/:26:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"28. What is SQL injection ? It is a form of attack on a database-driven Web site in which the attacker executes unauthorized SQL commands by taking advantage of insecure code on a system connected to the Internet, bypassing the firewall. SQL injection attacks are used to steal information from a database from which the data would normally not be available and/or to gain access to an organization’s host computers through the computer that is hosting the database. SQL injection attacks typically are easy to avoid by ensuring that a system has strong input validation. As name suggest we inject SQL which can be relatively dangerous for the database. Example this is a simple SQL SELECT email, passwd, login_id, full_name FROM members WHERE email = ‘x’ Now somebody does not put “x” as the input but puts “x ; DROP TABLE members;”. So the actual SQL which will execute is :- SELECT email, passwd, login_id, full_name FROM members WHERE email = ‘x’ ; DROP TABLE members; Think what will happen to your database. ","date":"2018-07-15","objectID":"/post/database-interview-questions/:27:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"29. What is Data Warehousing ? Data Warehousing is a process in which the data is stored and accessed from central location and is meant to support some strategic decisions. Data Warehousing is not a requirement for Data mining. But just makes your Data mining process more efficient. Data warehouse is a collection of integrated, subject-oriented databases designed to support the decision-support functions (DSF), where each unit of data is relevant to some moment in time. ","date":"2018-07-15","objectID":"/post/database-interview-questions/:28:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"30. What are Data Marts? Data Marts are smaller section of Data Warehouses. They help data warehouses collect data. For example your company has lot of branches which are spanned across the globe. Head-office of the company decides to collect data from all these branches for anticipating market. So to achieve this IT department can setup data mart in all branch offices and a central data warehouse where all data will finally reside. ","date":"2018-07-15","objectID":"/post/database-interview-questions/:29:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"31. What is Data mining ? Data mining is a concept by which we can analyze the current data from different perspectives and summarize the information in more useful manner. It’s mostly used either to derive some valuable information from the existing data or to predict sales to increase customer market. There are two basic aims of Data mining:- ","date":"2018-07-15","objectID":"/post/database-interview-questions/:30:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"32. What are indexes? What are B Trees? Index makes your search faster. So defining indexes to your database will make your search faster.Most of the indexing fundamentals use “B-Tree” or “Balanced-Tree” principle. It’s not a principle that is something is created by SQL Server or ORACLE but is a mathematical derived fundamental.In order that “B-tree” fundamental work properly both of the sides should be balanced. ","date":"2018-07-15","objectID":"/post/database-interview-questions/:31:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"33. What are the two types of indexes and explain them in detail? or What’s the difference between clustered and non-clustered indexes? There are basically two types of indexes:- Clustered Indexes. Non-Clustered Indexes. In clustered index the non-leaf level actually points to the actual data.In Non-Clustered index the leaf nodes point to pointers which then point to actual data. ","date":"2018-07-15","objectID":"/post/database-interview-questions/:32:0","tags":["interview","database"],"title":"Database Interview Questions","uri":"/post/database-interview-questions/"},{"categories":["Interview"],"content":"Design Patterns Interview Question Answers","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"1. What are Design Patterns? Design patterns represent the best practices used by experienced object-oriented software developers. Design patterns are solutions to general problems that software developers faced during software development. These solutions were obtained by trial and error by numerous software developers over quite a substantial period of time. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:1","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"2. Name types of Design Patterns? Design patterns can be classified in three categories: Creational, Structural and Behavioral patterns. Creational Patterns – These design patterns provide a way to create objects while hiding the creation logic, rather than instantiating objects directly using new operator. This gives program more flexibility in deciding which objects need to be created for a given use case. Structural Patterns – These design patterns concern class and object composition. Concept of inheritance is used to compose interfaces and define ways to compose objects to obtain new functionalities. Behavioral Patterns – These design patterns are specifically concerned with communication between objects. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:2","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"3. What are J2EE Patterns? These design patterns are specifically concerned with the presentation tier. These patterns are identified by Sun Java Center. What is Factory pattern? Factory pattern is one of most used design pattern in Java. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object. In Factory pattern, we create object without exposing the creation logic to the client and refer to newly created object using a common interface. What is Abstract Factory pattern? Abstract Factory patterns work around a super-factory which creates other factories. This factory is also called as factory of factories. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object. In Abstract Factory pattern an interface is responsible for creating a factory of related objects without explicitly specifying their classes. Each generated factory can give the objects as per the Factory pattern. What is Singleton pattern? Singleton pattern is one of the simplest design patterns in Java. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object. This pattern involves a single class which is responsible to create an object while making sure that only single object gets created. This class provides a way to access its only object which can be accessed directly without need to instantiate the object of the class. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:3","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"4. How can you create Singleton class in java? It is two step process. First, make the constructor private so that new operator cannot be used to instantiate the class. Return an object of the object if not null otherwise create the object and return the same via a method. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:4","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"5. What are the difference between a static class and a singleton class? Following are the differences between a static class and a singleton class. A static class can not be a top level class and can not implement interfaces where a singleton class can. All members of a static class are static but for a Singleton class it is not a requirement. A static class get initialized when it is loaded so it can not be lazily loaded where a singleton class can be lazily loaded. A static class object is stored in stack whereas singleton class object is stored in heap memory space. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:5","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"6. Can we create a clone of a singleton object? Yes. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:6","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"7. How to prevent cloning of a singleton object? Throw exception within the body of clone() method. Name some of the design patterns which are used in JDK library. Following are some of the design patterns which are used in JDK library. Decorator pattern is used by Wrapper classes. Singleton pattern is used by Runtime, Calendar classes. Factory pattern is used by Wrapper class like Integer.valueOf. Observer pattern is used by event handling frameworks like swing, awt. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:7","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"8. What is the benefit of Factory pattern? Factory pattern encapsulates the implementation details and underlying implementation can be changed without any impact on caller api. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:8","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"9. What is Builder pattern? Builder pattern builds a complex object using simple objects and using a step by step approach. This builder is independent of other objects. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:9","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"10. What is Prototype pattern? Prototype pattern refers to creating duplicate object while keeping performance in mind. This pattern involves implementing a prototype interface which tells to create a clone of the current object. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:10","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"11. When Prototype pattern is to be used? This pattern is used when creation of object directly is costly. For example, an object is to be created after a costly database operation. We can cache the object, returns its clone on next request and update the database as and when needed thus reducing database calls. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:11","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"12. What is Adapter pattern? Adapter pattern works as a bridge between two incompatible interfaces. This pattern involves a single class which is responsible to join functionalities of independent or incompatible interfaces. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:12","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"13. Give an example of Adapter pattern. A real life example could be a case of card reader which acts as an adapter between memory card and a laptop. You plugin the memory card into card reader and card reader into the laptop so that memory card can be read via laptop. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:13","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"14. What is Bridge pattern? Bridge is used when we need to decouple an abstraction from its implementation so that the two can vary independently. This type of design pattern comes under structural pattern as this pattern decouples implementation class and abstract class by providing a bridge structure between them. This pattern involves an interface which acts as a bridge which makes the functionality of concrete classes independent from interface implementer classes. Both types of classes can be altered structurally without affecting each other. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:14","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"15. What is Filter pattern? Filter pattern or Criteria pattern is a design pattern that enables developers to filter a set of objects using different criteria and chaining them in a decoupled way through logical operations. This type of design pattern comes under structural pattern as this pattern combines multiple criteria to obtain single criteria. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:15","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"16. What is Composite pattern? Composite pattern is used where we need to treat a group of objects in similar way as a single object. Composite pattern composes objects in term of a tree structure to represent part as well as whole hierarchy. This type of design pattern comes under structural pattern as this pattern creates a tree structure of group of objects. This pattern creates a class that contains group of its own objects. This class provides ways to modify its group of same objects. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:16","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"17. What is Decorator pattern? Decorator pattern allows a user to add new functionality to an existing object without altering its structure. This type of design pattern comes under structural pattern as this pattern acts as a wrapper to existing class. This pattern creates a decorator class which wraps the original class and provides additional functionality keeping class methods signature intact. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:17","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"18. What is Facade pattern? Facade pattern hides the complexities of the system and provides an interface to the client using which the client can access the system. This type of design pattern comes under structural pattern as this pattern adds an interface to existing system to hide its complexities. This pattern involves a single class which provides simplified methods required by client and delegates calls to methods of existing system classes. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:18","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"19. What is Flyweight pattern? Flyweight pattern is primarily used to reduce the number of objects created and to decrease memory footprint and increase performance. This type of design pattern comes under structural pattern as this pattern provides ways to decrease object count thus improving the object structure of application. Flyweight pattern tries to reuse already existing similar kind objects by storing them and creates new object when no matching object is found. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:19","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"20. What is Proxy pattern? In proxy pattern, a class represents functionality of another class. This type of design pattern comes under structural pattern. In proxy pattern, we create object having original object to interface its functionality to outer world. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:20","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"21. What is Chain of Responsibility pattern? As the name suggests, the chain of responsibility pattern creates a chain of receiver objects for a request. This pattern decouples sender and receiver of a request based on type of request. This pattern comes under behavioral patterns. In this pattern, normally each receiver contains reference to another receiver. If one object cannot handle the request then it passes the same to the next receiver and so on. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:21","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"22. What is Command pattern? Command pattern is a data driven design pattern and falls under behavioral pattern category. A request is wrapped under an object as command and passed to invoker object. Invoker object looks for the appropriate object which can handle this command and passes the command to the corresponding object which executes the command. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:22","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"23. What is Interpreter pattern? Interpreter pattern provides a way to evaluate language grammar or expression. This type of pattern comes under behavioral pattern. This pattern involves implementing an expression interface which tells to interpret a particular context. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:23","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"24. Give an example where Interpreter pattern is used? This pattern is used in SQL parsing, symbol processing engine etc. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:24","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"25. What is Iterator pattern? Iterator pattern is very commonly used design pattern in Java and .Net programming environment. This pattern is used to get a way to access the elements of a collection object in sequential manner without any need to know its underlying representation. Iterator pattern falls under behavioral pattern category. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:25","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"26. What are the entities of Service Locator pattern? Following are the entities of this type of design pattern. Service – Actual Service which will process the request. Reference of such service is to be looked upon in JNDI server. Context / Initial Context – JNDI Context carries the reference to service used for lookup purpose. Service Locator – Service Locator is a single point of contact to get services by JNDI lookup caching the services. Cache – Cache to store references of services to reuse them. Client – Client is the object that invokes the services via ServiceLocator. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:26","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"27. What is Mediator pattern? Mediator pattern is used to reduce communication complexity between multiple objects or classes. This pattern provides a mediator class which normally handles all the communications between different classes and supports easy maintenance of the code by loose coupling. Mediator pattern falls under behavioral pattern category. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:27","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"28. What is Memento pattern? Memento pattern is used to restore state of an object to a previous state. Memento pattern falls under behavioral pattern category. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:28","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"29. Name the actor classes used in Memento pattern. Memento pattern uses three actor classes. Memento contains state of an object to be restored. Originator creates and stores states in Memento objects and Caretaker object is responsible to restore object state from Memento. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:29","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"30. What is Observer pattern? Observer pattern is used when there is one-to-many relationship between objects such as if one object is modified, its dependent objects are to be notified automatically. Observer pattern falls under behavioral pattern category. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:30","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"31. Name the actor classes used in Observer pattern. Observer pattern uses three actor classes. Subject, Observer and Client. Subject is an object having methods to attach and detach observers to a client object. We have created an abstract class Observer and a concrete class Subject that is extending class Observer. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:31","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"32. What is state pattern? In State pattern a class behavior changes based on its state. This type of design pattern comes under behavior pattern. In State pattern, we create objects which represent various states and a context object whose behavior varies as its state object changes. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:32","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"33. What is Null Object pattern? In Null Object pattern, a null object replaces check of NULL object instance. Instead of putting if check for a null value, Null Object reflects a do nothing relationship. Such Null object can also be used to provide default behaviour in case data is not available. In Null Object pattern, we create an abstract class specifying various operations to be done, concrete classes extending this class and a null object class providing do nothing implemention of this class and will be used seemlessly where we need to check null value. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:33","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"34. What is Strategy pattern? In Strategy pattern, a class behavior or its algorithm can be changed at run time. This type of design pattern comes under behavior pattern. In Strategy pattern, we create objects which represent various strategies and a context object whose behavior varies as per its strategy object. The strategy object changes the executing algorithm of the context object. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:34","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"35. What is Template pattern? In Template pattern, an abstract class exposes defined way(s)/template(s) to execute its methods. Its subclasses can override the method implementation as per need but the invocation is to be in the same way as defined by an abstract class. This pattern comes under behavior pattern category. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:35","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"36. What is Visitor pattern? In Visitor pattern, we use a visitor class which changes the executing algorithm of an element class. By this way, execution algorithm of element can vary as and when visitor varies. This pattern comes under behavior pattern category. As per the pattern, element object has to accept the visitor object so that visitor object handles the operation on the element object. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:36","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"37. What is MVC pattern? MVC Pattern stands for Model-View-Controller Pattern. This pattern is used to separate application’s concerns. Model – Model represents an object or JAVA POJO carrying data. It can also have logic to update controller if its data changes. View – View represents the visualization of the data that model contains. Controller – Controller acts on both model and view. It controls the data flow into model object and updates the view whenever data changes. It keeps view and model separate. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:37","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"38. What is Business Delegate pattern? Business Delegate Pattern is used to decouple presentation tier and business tier. It is basically use to reduce communication or remote lookup functionality to business tier code in presentation tier code. In business tier we have following entities. Client – Presentation tier code may be JSP, servlet or UI java code. Business Delegate – A single entry point class for client entities to provide access to Business Service methods. LookUp Service – Lookup service object is responsible to get relative business implementation and provide business object access to business delegate object. Business Service – Business Service interface. Concrete classes implement this business service to provide actual business implementation logic. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:38","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"39. What is Composite Entity pattern? Composite Entity pattern is used in EJB persistence mechanism. A Composite entity is an EJB entity bean which represents a graph of objects. When a composite entity is updated, internally dependent objects beans get updated automatically as being managed by EJB entity bean. Following are the participants in Composite Entity Bean. Composite Entity – It is primary entity bean. It can be coarse grained or can contain a coarse grained object to be used for persistence purpose. Coarse-Grained Object – This object contains dependent objects. It has its own life cycle and also manages life cycle of dependent objects. Dependent Object – Dependent object is an object which depends on coarse grained object for its persistence lifecycle. Strategies – Strategies represents how to implement a Composite Entity. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:39","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"40. What is Data Access Object Pattern(DAO) pattern? Data Access Object Pattern or DAO pattern is used to separate low level data accessing API or operations from high level business services. Following are the participants in Data Access Object Pattern. Data Access Object Interface – This interface defines the standard operations to be performed on a model object(s). Data Access Object concrete class – This class implements above interface. This class is responsible to get data from a data source which can be database / xml or any other storage mechanism. Model Object or Value Object – This object is simple POJO containing get/set methods to store data retrieved using DAO class. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:40","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"41. What is Front Controller pattern? The front controller design pattern is used to provide a centralized request handling mechanism so that all requests will be handled by a single handler. This handler can do the authentication/ authorization/ logging or tracking of request and then pass the requests to corresponding handlers. Following are the entities of this type of design pattern. Front Controller – Single handler for all kinds of requests coming to the application (either web based/ desktop based). Dispatcher – Front Controller may use a dispatcher object which can dispatch the request to corresponding specific handler. View – Views are the object for which the requests are made. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:41","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"42. What is Intercepting Filter pattern? The intercepting filter design pattern is used when we want to do some pre-processing / post-processing with request or response of the application. Filters are defined and applied on the request before passing the request to actual target application. Filters can do the authentication/ authorization/ logging or tracking of request and then pass the requests to corresponding handlers. What are the entities of Intercepting Filter pattern? ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:42","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"43. Following are the entities of this type of design pattern. Filter – Filter which will performs certain task prior or after execution of request by request handler. Filter Chain – Filter Chain carries multiple filters and help to execute them in defined order on target. Target – Target object is the request handler. Filter Manager – Filter Manager manages the filters and Filter Chain. Client – Client is the object who sends request to the Target object. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:43","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"44. What is Service Locator pattern? The service locator design pattern is used when we want to locate various services using JNDI lookup. Considering high cost of looking up JNDI for a service, Service Locator pattern makes use of caching technique. For the first time a service is required, Service Locator looks up in JNDI and caches the service object. Further lookup or same service via Service Locator is done in its cache which improves the performance of application to great extent. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:44","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Interview"],"content":"45. What is Transfer Object pattern? The Transfer Object pattern is used when we want to pass data with multiple attributes in one shot from client to server. Transfer object is also known as Value Object. Transfer Object is a simple POJO class having getter/setter methods and is serializable so that it can be transferred over the network. It does not have any behavior. Server Side business class normally fetches data from the database and fills the POJO and send it to the client or pass it by value. For client, transfer object is read-only. Client can create its own transfer object and pass it to server to update values in database in one shot. Following are the entities of this type of design pattern. Business Object – Business Service fills the Transfer Object with data. Transfer Object – Simple POJO having methods to set/get attributes only. Client – Client either requests or sends the Transfer Object to Business Object. ","date":"2018-07-15","objectID":"/post/design-pattern-interview-questions/:0:45","tags":["interview","design-patterns"],"title":"Design Patterns Interview Question Answers","uri":"/post/design-pattern-interview-questions/"},{"categories":["Programming"],"content":"Object Oriented Programming Interview Question Answers","date":"2018-07-15","objectID":"/post/oop-interview-questions/","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"1. What is OOPS? OOPS is abbreviated as Object Oriented Programming system in which programs are considered as a collection of objects. Each object is nothing but an instance of a class. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:1:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"2. Write basic concepts of OOPS? Following are the concepts of OOPS and are as follows:. Abstraction. Encapsulation. Inheritance. Polymorphism. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:2:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"3. What is a class? A class is simply a representation of a type of object. It is the blueprint/ plan/ template that describe the details of an object. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:3:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"4. What is an object? Object is termed as an instance of a class, and it has its own state, behavior and identity. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:4:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"5. What is Encapsulation? Encapsulation is an attribute of an object, and it contains all data which is hidden. That hidden data can be restricted to the members of that class. Levels are Public,Protected, Private, Internal and Protected Internal. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:5:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"6. What is Polymorphism? Polymorphism is nothing but assigning behavior or value in a subclass to something that was already declared in the main class. Simply, polymorphism takes more than one form. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:6:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"7. What is Inheritance? Inheritance is a concept where one class shares the structure and behavior defined in another class. If inheritance applied on one class is called Single Inheritance, and if it depends on multiple classes, then it is called multiple Inheritance. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:7:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"8. What are manipulators? Manipulators are the functions which can be used in conjunction with the insertion («) and extraction (») operators on an object. Examples are endl and setw. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:8:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"9. Define a constructor? Constructor is a method used to initialize the state of an object, and it gets invoked at the time of object creation. Rules for constructor are:. Constructor Name should be same as class name. Constructor must have no return type. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:9:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"10. Define Destructor? Destructor is a method which is automatically called when the object is made of scope or destroyed. Destructor name is also same as class name but with the tilde symbol before the name. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:10:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"11. What is Inline function? Inline function is a technique used by the compilers and instructs to insert complete body of the function wherever that function is used in the program source code. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:11:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"12. What is a virtual function? Virtual function is a member function of class and its functionality can be overridden in its derived class. This function can be implemented by using a keyword called virtual, and it can be given during function declaration. Virtual function can be achieved in C++, and it can be achieved in C Language by using function pointers or pointers to function. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:12:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"13. What is friend function? Friend function is a friend of a class that is allowed to access to Public, private or protected data in that same class. If the function is defined outside the class cannot access such information. Friend can be declared anywhere in the class declaration, and it cannot be affected by access control keywords like private, public or protected. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:13:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"14. What is function overloading? Function overloading is defined as a normal function, but it has the ability to perform different tasks. It allows creation of several methods with the same name which differ from each other by type of input and output of the function. Example void add(int\u0026 a, int\u0026 b); void add(double\u0026 a, double\u0026 b); void add(struct bob\u0026 a, struct bob\u0026 b); ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:14:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"15. What is operator overloading? Operator overloading is a function where different operators are applied and depends on the arguments. Operator,-,* can be used to pass through the function , and it has their own precedence to execute. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:15:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"16. What is an abstract class? An abstract class is a class which cannot be instantiated. Creation of an object is not possible with abstract class , but it can be inherited. An abstract class can contain only Abstract method. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:16:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"17. What is a ternary operator? Ternary operator is said to be an operator which takes three arguments. Arguments and results are of different data types , and it is depends on the function. Ternary operator is also called as conditional operator. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:17:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"18. What is the use of finalize method? Finalize method helps to perform cleanup operations on the resources which are not currently used. Finalize method is protected , and it is accessible only through this class or by a derived class. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:18:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"19. What are different types of arguments? A parameter is a variable used during the declaration of the function or subroutine and arguments are passed to the function , and it should match with the parameter defined. There are two types of Arguments. Call by Value – Value passed will get modified only inside the function , and it returns the same value whatever it is passed it into the function. Call by Reference – Value passed will get modified in both inside and outside the functions and it returns the same or different value. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:19:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"20. What is super keyword? Super keyword is used to invoke overridden method which overrides one of its super class methods. This keyword allows to access overridden methods and also to access hidden members of the super class. It also forwards a call from a constructor to a constructor in the super class. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:20:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"21. What is method overriding? Method overriding is a feature that allows sub class to provide implementation of a method that is already defined in the main class. This will overrides the implementation in the super class by providing the same method name, same parameter and same return type. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:21:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"22. What is an interface? An interface is a collection of abstract method. If the class implements an inheritance, and then thereby inherits all the abstract methods of an interface. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:22:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"23. What is exception handling? Exception is an event that occurs during the execution of a program. Exceptions can be of any type – Run time exception, Error exceptions. Those exceptions are handled properly through exception handling mechanism like try, catch and throw keywords. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:23:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"24. What are tokens? Token is recognized by a compiler and it cannot be broken down into component elements. Keywords, identifiers, constants, string literals and operators are examples of tokens. Even punctuation characters are also considered as tokens – Brackets, Commas, Braces and Parentheses. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:24:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"25. Difference between overloading and overriding? Overloading is static binding whereas Overriding is dynamic binding. Overloading is nothing but the same method with different arguments , and it may or may not return the same value in the same class itself. Overriding is the same method names with same arguments and return types associates with the class and its child class. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:25:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"26. Difference between class and an object? An object is an instance of a class. Objects hold any information , but classes don’t have any information. Definition of properties and functions can be done at class and can be used by the object. Class can have sub-classes, and an object doesn’t have sub-objects. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:26:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"27. What is an abstraction? Abstraction is a good feature of OOPS , and it shows only the necessary details to the client of an object. Means, it shows only necessary details for an object, not the inner details of an object. Example – When you want to switch On television, it not necessary to show all the functions of TV. Whatever is required to switch on TV will be showed by using abstract class. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:27:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"28. What are access modifiers? Access modifiers determine the scope of the method or variables that can be accessed from other various objects or classes. There are 5 types of access modifiers , and they are as follows:. Private. Protected. Public. Friend. Protected Friend. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:28:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"29. What is sealed modifiers? Sealed modifiers are the access modifiers where it cannot be inherited by the methods. Sealed modifiers can also be applied to properties, events and methods. This modifier cannot be applied to static members. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:29:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"30. How can we call the base method without creating an instance? Yes, it is possible to call the base method without creating an instance. And that method should be,. Static method. Doing inheritance from that class.-Use Base Keyword from derived class. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:30:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"31. What is the difference between new and override? The new modifier instructs the compiler to use the new implementation instead of the base class function. Whereas, Override modifier helps to override the base class function. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:31:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"32. What are the various types of constructors? There are three various types of constructors , and they are as follows:. – Default Constructor – With no parameters. – Parametric Constructor – With Parameters. Create a new instance of a class and also passing arguments simultaneously. – Copy Constructor – Which creates a new object as a copy of an existing object. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:32:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"33. What is early and late binding? Early binding refers to assignment of values to variables during design time whereas late binding refers to assignment of values to variables during run time. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:33:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"34. What is ‘this’ pointer? THIS pointer refers to the current object of a class. THIS keyword is used as a pointer which differentiates between the current object with the global object. Basically, it refers to the current object. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:34:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"35. What is the difference between structure and a class? Structure default access type is public , but class access type is private. A structure is used for grouping data whereas class can be used for grouping data and methods. Structures are exclusively used for data and it doesn’t require strict validation , but classes are used to encapsulates and inherit data which requires strict validation. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:35:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"36. What is the default access modifier in a class? The default access modifier of a class is Private by default. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:36:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"37. What is pure virtual function? A pure virtual function is a function which can be overridden in the derived classbut cannot be defined. A virtual function can be declared as Pure by using the operator =0. Example -. Virtual void function1() // Virtual, Not pure Virtual void function2() = 0 //Pure virtual ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:37:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"38. What are all the operators that cannot be overloaded? Following are the operators that cannot be overloaded -. Scope Resolution (:: ) Member Selection (.) Member selection through a pointer to function (.*) ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:38:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"39. What is dynamic or run time polymorphism? Dynamic or Run time polymorphism is also known as method overriding in which call to an overridden function is resolved during run time, not at the compile time. It means having two or more methods with the same name,same signature but with different implementation. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:39:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"40. Do we require parameter for constructors? No, we do not require parameter for constructors. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:40:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"41. What is a copy constructor? This is a special constructor for creating a new object as a copy of an existing object. There will be always only on copy constructor that can be either defined by the user or the system. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:41:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"42. What does the keyword virtual represented in the method definition? It means, we can override the method. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:42:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"43. Whether static method can use non static members? False. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:43:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"44. What are base class, sub class and super class? Base class is the most generalized class , and it is said to be a root class. Sub class is a class that inherits from one or more base classes. Super class is the parent class from which another class inherits. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:44:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"45. What is static and dynamic binding? Binding is nothing but the association of a name with the class. Static binding is a binding in which name can be associated with the class during compilation time , and it is also called as early Binding. Dynamic binding is a binding in which name can be associated with the class during execution time , and it is also called as Late Binding. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:45:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"46. How many instances can be created for an abstract class? Zero instances will be created for an abstract class. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:46:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"47. Which keyword can be used for overloading? Operator keyword is used for overloading. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:47:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"48. What is the default access specifier in a class definition? Private access specifier is used in a class definition. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:48:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"49. Which OOPS concept is used as reuse mechanism? Inheritance is the OOPS concept that can be used as reuse mechanism. ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:49:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Programming"],"content":"50. Which OOPS concept exposes only necessary information to the calling functions? Data Hiding / Abstraction ","date":"2018-07-15","objectID":"/post/oop-interview-questions/:50:0","tags":["interview","oop"],"title":"Object Oriented Programming Interview Question Answers","uri":"/post/oop-interview-questions/"},{"categories":["Interview"],"content":"Operating System Interview Question Answers","date":"2018-07-15","objectID":"/post/os-interview-questions/","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"1. What is an operating system? An operating system is a program that acts as an intermediary between the user and the computer hardware. The purpose of an OS is to provide a convenient environment in which user can execute programs in a convenient and efficient manner. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:1:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"2. What are the different operating systems? Batched operating systems Multi-programmed operating systems Time sharing operating systems Distributed operating systems Real-time operating systems ","date":"2018-07-15","objectID":"/post/os-interview-questions/:2:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"3. What are the basic functions of an operating system? Operating system controls and coordinates the use of the hardware among the various applications programs for various uses. Operating system acts as resource allocator and manager. Also operating system is control program which controls the user programs to prevent errors and improper use of the computer. It is especially concerned with the operation and control of I/O devices. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:3:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"4. What is kernel? Kernel is the core and essential part of computer operating system that provides basic services for all parts of OS. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:4:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"5. What is difference between micro kernel and macro kernel? Micro kernel is a kernel which run services those are minimal for operating system performance. In this kernel all other operations are performed by processor. Macro Kernel is a combination of micro and monolithic kernel. In monolithic kernel all operating system code is in single executable image. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:5:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"6. What is dead lock? Deadlock is a situation or condition where the two processes are waiting for each other to complete so that they can start. This result both the processes to hang. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:6:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"7. What is a process? A program in execution is called a process. Processes are of two types: Operating system processes User processes ","date":"2018-07-15","objectID":"/post/os-interview-questions/:7:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"8. What are the states of a process? New Running Waiting Ready Terminated ","date":"2018-07-15","objectID":"/post/os-interview-questions/:8:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"9. What is starvation and aging? Starvation is Resource management problem where a process does not get the resources it needs for a long time because the resources are being allocated to other processes. Aging is a technique to avoid starvation in a scheduling system. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:9:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"10. What is semaphore? Semaphore is a variable, whose status reports common resource, Semaphore is of two types one is Binary semaphore and other is Counting semaphore. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:10:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"11. What is context switching? Transferring the control from one process to other process requires saving the state of the old process and loading the saved state for new process. This task is known as context switching. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:11:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"12. What is a thread? A thread is a program line under execution. Thread sometimes called a light-weight process, is a basic unit of CPU utilization; it comprises a thread id, a program counter, a register set, and a stack ","date":"2018-07-15","objectID":"/post/os-interview-questions/:12:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"13. What is process synchronization? A situation, where several processes access and manipulate the same data concurrently and the outcome of the execution depends on the particular order in which the access takes place, is called race condition. To guard against the race condition we need to ensure that only one process at a time can be manipulating the same data. The technique we use for this is called process synchronization. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:13:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"14. What is virtual memory? Virtual memory is hardware technique where the system appears to have more memory that it actually does. This is done by time-sharing, the physical memory and storage parts of the memory one disk when they are not actively being used. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:14:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"15. What is thrashing? It is a phenomenon in virtual memory schemes when the processor spends most of its time swapping pages, rather than executing instructions. This is due to an inordinate number of page faults. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:15:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"16. What is fragmentation? Tell about different types of fragmentation? When many of free blocks are too small to satisfy any request then fragmentation occurs. External fragmentation and internal fragmentation are two types of fragmentation. External Fragmentation happens when a dynamic memory allocation algorithm allocates some memory and a small piece is left over that cannot be effectively used. Internal fragmentation is the space wasted inside of allocated memory blocks because of restriction on the allowed sizes of allocated blocks. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:16:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"17. What are necessary conditions for dead lock? Mutual exclusion (where at least one resource is non-shareable) Hold and wait (where a process holds one resource and waits for other resource) No preemption (where the resources can’t be preempted) Circular wait (where p[i] is waiting for p[j] to release a resource. ) ","date":"2018-07-15","objectID":"/post/os-interview-questions/:17:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"18. What is cache memory? Cache memory is random access memory (RAM) that a computer microprocessor can access more quickly than it can access regular RAM. As the microprocessor processes data, it looks first in the cache memory and if it finds the data there (from a previous reading of data), it does not have to do the more time-consuming reading of data from larger memory. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:18:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"19. What is logical and physical addresses space? Logical address space is generated from CPU; it bound to a separate physical address space is central to proper memory management. Physical address space is seen by the memory unit. Logical address space is virtual address space. Both these address space will be same at compile time but differ at execution time. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:19:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"20. Differentiate between Compiler and Interpreter? An interpreter reads one instruction at a time and carries out the actions implied by that instruction. It does not perform any translation. But a compiler translates the entire instructions ","date":"2018-07-15","objectID":"/post/os-interview-questions/:20:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"21. What is Throughput, Turnaround time, waiting time and Response time? Throughput – number of processes that complete their execution per time unit Turnaround time – amount of time to execute a particular process Waiting time – amount of time a process has been waiting in the ready queue Response time – amount of time it takes from when a request was submitted until the first response is produced, not output (for time-sharing environment) ","date":"2018-07-15","objectID":"/post/os-interview-questions/:21:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"22. What is Memory-Management Unit (MMU)? Hardware device that maps virtual to physical address. In MMU scheme, the value in the relocation register is added to every address generated by a user process at the time it is sent to memory. The user program deals with logical addresses; it never sees the real physical addresses ","date":"2018-07-15","objectID":"/post/os-interview-questions/:22:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"23. What is a Real-Time System? A real time process is a process that must respond to the events within a certain time period. A real time operating system is an operating system that can run real time processes successfully ","date":"2018-07-15","objectID":"/post/os-interview-questions/:23:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"24. What is a trap and trapdoor? Trapdoor is a secret undocumented entry point into a program used to grant access without normal methods of access authentication. A trap is a software interrupt, usually the result of an error condition. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:24:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"25. When is a system in safe state? The set of dispatchable processes is in a safe state if there exists at least one temporal order in which all processes can be run to completion without resulting in a deadlock. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:25:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"26. Explain the concept of the Distributed systems? Distributed systems work in a network. They can share the network resources, communicate with each other. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:26:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"27. What is cache-coherency? In a multiprocessor system there exist several caches each may containing a copy of same variable A. Then a change in one cache should immediately be reflected in all other caches this process of maintaining the same value of a data in all the caches s called cache-coherency. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:27:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"28. What is a long term scheduler and short term schedulers? Long term schedulers are the job schedulers that select processes from the job queue and load them into memory for execution. The short term schedulers are the CPU schedulers that select a process from the ready queue and allocate the CPU to one of them. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:28:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"29. Explain the meaning of mutex. Mutex is the short form for ‘Mutual Exclusion object’. A mutex allows multiple threads for sharing the same resource. The resource can be file. A mutex with a unique name is created at the time of starting a program. A mutex must be locked from other threads, when any thread that needs the resource. When the data is no longer used / needed, the mutex is set to unlock. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:29:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"30. What is cycle stealing? We encounter cycle stealing in the context of Direct Memory Access (DMA). Either the DMA controller can use the data bus when the CPU does not need it, or it may force the CPU to temporarily suspend operation. The latter technique is called cycle stealing. Note that cycle stealing can be done only at specific break points in an instruction cycle. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:30:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"31. What is Marshalling? The process of packaging and sending interface method parameters across thread or process boundaries. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:31:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"32. What is a daemon? Daemon is a program that runs in the background without user’s interaction. A daemon runs in a multitasking operating system like UNIX. A daemon is initiated and controlled by special programs known as ‘processes’. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:32:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"33. What is pre-emptive and non-preemptive scheduling? Preemptive scheduling: The preemptive scheduling is prioritized. The highest priority process should always be the process that is currently utilized. Non-Preemptive scheduling: When a process enters the state of running, the state of that process is not deleted from the scheduler until it finishes its service time. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:33:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"34. What is busy waiting? The repeated execution of a loop of code while waiting for an event to occur is called busy-waiting. The CPU is not engaged in any real productive activity during this period, and the process does not progress toward completion. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:34:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"35. What is page cannibalizing? Page swapping or page replacements are called page cannibalizing. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:35:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"36. What is SMP? To achieve maximum efficiency and reliability a mode of operation known as symmetric multiprocessing is used. In essence, with SMP any process or threads can be assigned to any processor. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:36:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"37. What is process migration? It is the transfer of sufficient amount of the state of process from one machine to the target machine. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:37:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"38. Difference between Primary storage and secondary storage? Primary memory is the main memory (Hard disk, RAM) where the operating system resides. Secondary memory can be external devices like CD, floppy magnetic discs etc. secondary storage cannot be directly accessed by the CPU and is also external memory storage. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:38:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"39. Define compactions. Compaction is a process in which the free space is collected in a large memory chunk to make some space available for processes. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:39:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"40. What are residence monitors? Early operating systems were called residence monitors. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:40:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"41. What is dual-mode operation? In order to protect the operating systems and the system programs from the malfunctioning programs the two mode operations were evolved System mode User mode. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:41:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"42. What is a device queue? A list of processes waiting for a particular I/O device is called device queue. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:42:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"43. What are the different types of Real-Time Scheduling? Hard real-time systems required to complete a critical task within a guaranteed amount of time. Soft real-time computing requires that critical processes receive priority over less fortunate ones. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:43:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"44. What is relative path and absolute path? Absolute path– Exact path from root directory. Relative path– Relative to the current path. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:44:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"45. What are the disadvantages of context switching? Time taken for switching from one process to other is pure over head. Because the system does no useful work while switching. So one of the solutions is to go for threading when ever possible. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:45:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"46. What is a data register and address register? Data registers – can be assigned to a variety of functions by the programmer. They can be used with any machine instruction that performs operations on data. Address registers – contain main memory addresses of data and instructions or they contain a portion of the address that is used in the calculation of the complete addresses. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:46:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"47. What is DRAM? Dynamic Ram stores the data in the form of Capacitance, and Static RAM stores the data in Voltages. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:47:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"48. What are local and global page replacements? Local replacement means that an incoming page is brought in only to the relevant process’ address space. Global replacement policy allows any page frame from any process to be replaced. The latter is applicable to variable partitions model only. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:48:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"49. Explain the concept of the batched operating systems? In batched operating system the users gives their jobs to the operator who sorts the programs according to their requirements and executes them. This is time consuming but makes the CPU busy all the time. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:49:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"50. What is SCSI? SCSI – Small computer systems interface is a type of interface used for computer components such as hard drives, optical drives, scanners and tape drives. It is a competing technology to standard IDE (Integrated Drive Electronics). ","date":"2018-07-15","objectID":"/post/os-interview-questions/:50:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"51.When is a system in safe state? The set of dispatchable processes is in a safe state if there exists at least one temporal order in which all processes can be run to completion without resulting in a deadlock. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:51:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"52. What is cycle stealing? We encounter cycle stealing in the context of Direct Memory Access (DMA). Either the DMA controller can use the data bus when the CPU does not need it, or it may force the CPU to temporarily suspend operation. The latter technique is called cycle stealing. Note that cycle stealing can be done only at specific break points in an instruction cycle. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:52:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"53. What is an idle thread? The special thread a dispatcher will execute when no ready thread is found. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:53:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"54. What is FtDisk? It is a fault tolerance disk driver for Windows NT. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:54:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"55.What is Dispatcher? Dispatcher module gives control of the CPU to the process selected by the short-term scheduler; this involves: Switching context, Switching to user mode, Jumping to the proper location in the user program to restart that program, dispatch latency – time it takes for the dispatcher to stop one process and start another running. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:55:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"56. When does the condition ‘rendezvous’ arise? In message passing, it is the condition in which, both, the sender and receiver are blocked until the message is delivered. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:56:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"57. What is process spawning? When the OS at the explicit request of another process creates a process, this action is called process spawning ","date":"2018-07-15","objectID":"/post/os-interview-questions/:57:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"58. What are the reasons for process suspension? swapping interactive user request timing parent process request ","date":"2018-07-15","objectID":"/post/os-interview-questions/:58:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"59. What are the sub-components of I/O manager in Windows NT? Network redirector/ Server Cache manager. File systems Network driver Device driver ","date":"2018-07-15","objectID":"/post/os-interview-questions/:59:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"60. What is a drawback of MVT? ability to support multiple processors virtual storage source level debugging ","date":"2018-07-15","objectID":"/post/os-interview-questions/:60:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Interview"],"content":"61. What is the Translation Lookaside Buffer (TLB)? In a cached system, the base addresses of the last few referenced pages is maintained in registers called the TLB that aids in faster lookup. TLB contains those page-table entries that have been most recently used. Normally, each virtual memory reference causes 2 physical memory accesses- one to fetch appropriate page-table entry, and one to fetch the desired data. Using TLB in-between, this is reduced to just one physical memory access in cases of TLB-hit. ","date":"2018-07-15","objectID":"/post/os-interview-questions/:61:0","tags":["interview","operating-system"],"title":"Operating System Interview Question Answers","uri":"/post/os-interview-questions/"},{"categories":["Lexical Analyzer"],"content":"Constructing a Lexical Analyzer","date":"2018-06-19","objectID":"/post/lexical-analyzer/","tags":["lexical-analyzer"],"title":"Constructing a Lexical Analyzer","uri":"/post/lexical-analyzer/"},{"categories":["Lexical Analyzer"],"content":"1 Task Description Construct a lexical analyzer generator that takes a lexer specification file mylex.l as input. The file mylex.l contains a set of regular expressions and the corresponding tokens where the input alphabet is ∑ = {a,b}. The analyzer should be able to take a input string and return the lexemes that matches with the regular expressions and the corresponding tokens. ALTERNATIVELY, your program Analyzer.c/Analyzer.java/Analyzer.exe can take as input the mylex.l and the input string and produce the list of matched lexemes and tokens output. The regular expressions may contain the following operators: ‘.’, ‘|’, ‘*’, ‘+’ (positive closure),?, and symbols: () and epsilon (we will use e instead of ε) . We will follow lex/flex’s conventions for matching If it finds more than one match, it takes the one matching the most text If it finds two or more matches of the same length, the rule listed first in the mylex.l input file is chosen. Also assume the input string doesn’t contain any illegal characters and the whole input string can be divided into the token to be recognized. Extra credit will be awarded if your lexer can handle error case –i.e, skip illegal characters and portions of the input string that doesn’t match with any of the regular expressions. ","date":"2018-06-19","objectID":"/post/lexical-analyzer/:1:0","tags":["lexical-analyzer"],"title":"Constructing a Lexical Analyzer","uri":"/post/lexical-analyzer/"},{"categories":["Lexical Analyzer"],"content":"2 Implementation Construct DFAs from the given regular expressions using the direct DFA construction algorithm that uses the firstpos, lastpos, and followpos functions. You may want to convert the regular expressions to postfix notation first and rather than creating a tree use a stack to find the firstpos, lastpos, and followpos for each ‘node’. You can use C/C++ or Java for implementation. Sample input and output are given below: ","date":"2018-06-19","objectID":"/post/lexical-analyzer/:2:0","tags":["lexical-analyzer"],"title":"Constructing a Lexical Analyzer","uri":"/post/lexical-analyzer/"},{"categories":["Lexical Analyzer"],"content":"2.1 Sample mylex.l file a+ TOKEN1 a|b|e).a.b* TOKEN2 (aa)+(bb)+ TOKEN3 ","date":"2018-06-19","objectID":"/post/lexical-analyzer/:2:1","tags":["lexical-analyzer"],"title":"Constructing a Lexical Analyzer","uri":"/post/lexical-analyzer/"},{"categories":["Lexical Analyzer"],"content":"2.2 Sample input for mylex.exe aabbbbaaaa ","date":"2018-06-19","objectID":"/post/lexical-analyzer/:2:2","tags":["lexical-analyzer"],"title":"Constructing a Lexical Analyzer","uri":"/post/lexical-analyzer/"},{"categories":["Lexical Analyzer"],"content":"2.3 Sample output for mylex.exe aabbbb TOKEN2 aaaa TOKEN1 ","date":"2018-06-19","objectID":"/post/lexical-analyzer/:2:3","tags":["lexical-analyzer"],"title":"Constructing a Lexical Analyzer","uri":"/post/lexical-analyzer/"},{"categories":["Lexical Analyzer"],"content":"2.4 My Solution Procedure and Source code 2.4.1 How it works: Convert infix regular expression to postfix regular expression Find Nullablity, Firstpos, Lastpos, Followpos Make DFA table from these. Now Find whether any string gets accepted by these DFAs. Now check the longest sequence accepted by the DFAs. That’s all about algorithm. 2.4.2 Source Code : Lexical Analyzer 2.4.3 How to run my code: Add my 2 java sources to your project. There is a file input.l (which is called mylex.l in the assignment details) where actually the regular expression are written. (there is an absolute path for the file in the code, change it for your own use) Our program will analyze them and will take input from console to test whether your given string matches any regular expression Initially we handled only two characters ‘a’ and ‘b’, but you can convert it easily for any characters (see comments to understand easily) 2.4.4 Example strings as input: Note: Not regular expressions, regular expressions are given in input.l. Offcourse you can also change/add/remove for further checking aab abab aabbb ","date":"2018-06-19","objectID":"/post/lexical-analyzer/:2:4","tags":["lexical-analyzer"],"title":"Constructing a Lexical Analyzer","uri":"/post/lexical-analyzer/"},{"categories":["Programming"],"content":"Linked List Basics","date":"2018-06-19","objectID":"/post/linked-list-basics/","tags":["linked-list","data-structure"],"title":"Linked List Basics","uri":"/post/linked-list-basics/"},{"categories":["Programming"],"content":"A linked list is a data structure for storing, searching, manipulating and doing many more with a list of data. ‘Array’ data structure has some limitations that can be overcome easily by the linked list having some dynamic features. Let’s see what a linked list can do – Successive elements are connected by pointers. Last element points to NULL. It can grow or shrink in size during execution of a program. It can be made just as long as required. It does not waste memory space. Fig: Liked List Structure We must know the pointer to the first element of the list (called start, head, etc.). ","date":"2018-06-19","objectID":"/post/linked-list-basics/:0:0","tags":["linked-list","data-structure"],"title":"Linked List Basics","uri":"/post/linked-list-basics/"},{"categories":["Programming"],"content":"Insertion and deletion in linked list For insertion: A record is created holding the new item. The nextpointer of the new record is set to link it to the item which is to follow it in the list. The nextpointer of the item which is to precede it must be modified to point to the new item. Fig: Linked List Insertion For deletion: The nextpointer of the item immediately preceding the one to be deleted is altered, and made to point to the item following the deleted item. Fig: Linked List Deletion ","date":"2018-06-19","objectID":"/post/linked-list-basics/:0:1","tags":["linked-list","data-structure"],"title":"Linked List Basics","uri":"/post/linked-list-basics/"},{"categories":["Programming"],"content":"Array versus Linked Lists Inserting/deleting an element at the end. Randomly accessing any element. Searching the list for a particular value. Inserting an element. Deleting an element. Applications where sequential access is required. In situations where the number of elements cannot be predicted beforehand. ","date":"2018-06-19","objectID":"/post/linked-list-basics/:0:2","tags":["linked-list","data-structure"],"title":"Linked List Basics","uri":"/post/linked-list-basics/"},{"categories":["Programming"],"content":"Types of linked lists Depending on the way in which the links are used to maintain adjacency, several different types of linked lists are possible. Circular linked list The pointer from the last element in the list points back to the first element. Fig: Circular Linked List Doubly linked list Pointers exist between adjacent nodes in both directions. The list can be traversed either forward or backward. Usually two pointers are maintained to keep track of the list, head and tail. Fig: Doubly Linked List ","date":"2018-06-19","objectID":"/post/linked-list-basics/:0:3","tags":["linked-list","data-structure"],"title":"Linked List Basics","uri":"/post/linked-list-basics/"},{"categories":["Programming"],"content":"Basic Operations on a List Creating a list Traversing the list Inserting an item in the list Deleting an item from the list Concatenating two lists into one First of all we need to declare a user defined structure that will carry the information and same type of pointer variable that will lead us to the next address of the element of the list.Let’s declare a node which will hold student info containing roll, name, age of any student and the pointer to the next student of the list. /* definition of a data node for holding student information */ struct node { int roll; char name[20]; int age; struct node *next; }; Initialization of the head node of the list from where we will always start our look up for insertion, deletion and searching any node on any key i.e. name, roll or age – /* head points to first node in list*/ struct node *head = (struct node *) NULL; Allocating memory for the newly created node will be looking like the following- /* this initialises a node, allocates memory for the node, and returns */ /* a pointer to the new node. Must pass it the node details, name and id */ struct node * initnode( int roll, char *name, int age ) { struct node *ptr; ptr = (struct node *) calloc( 1, sizeof(struct node ) ); if( ptr == NULL ) /* error allocating node? */ return (struct node ) NULL; /* then return NULL, else */ else { /* allocated node successfully */ ptr-\u003eroll = roll; /* copy roll */ strcpy( ptr-\u003ename, name ); /* fill in name details */ ptr-\u003eage = age; /* copy age */ return ptr; /* return pointer to new node */ } } Or if we want to allocate memory so simply C++ provides the following API. Just we need to assign the name and id. struct node * initnode( int roll, char *name, int age ) { node *ptr; ptr = new node(); str-\u003eroll = roll; strcpy(ptr-\u003ename, name); ptr-\u003eage = age; return ptr; } So our first node is created- Fig: Head/First node Creating list If there are n number of nodes in the initial linked list: Allocate n records, one by one. Read in the fields of the records. Modify the links of the records so that the chain is formed. node create_list(int n, node *head) { int i, n; node *p; // pointer that will iterate through the list p = head; //first pointer must be the head node for(i=1; i\u003c=n; i++) { scanf(\"%d %s %d\", \u0026p-\u003eroll, p-\u003ename, \u0026p-\u003eage); //put the values in p if(i==n) // for the last element { p-\u003enext = NULL; //there is no next element and this is the end of the list } else { node *nextNode = (node *) malloc(sizeof(node)); //allocating memory for the next node p-\u003enext = nextNode; //pointing nextNode as the next node of p p = p-\u003enext; //now p be the next node for the sake of iteration } } } Traversing list Follow the pointers. Display the contents of the nodes as they are traversed. Stop when the nextpointer points to NULL. void display (node *head) { int i = 1; node *p; p = head; while (p != NULL) { printf(\"\\nNode%d: %d %s %d\", i, p-\u003eroll, p-\u003ename, p-\u003eage); i++; p = p-\u003enext; } printf(\"\\n\"); } Inserting an item in the list Suppose the problem is to insert a node before a specified node. Specified means some value is given for the node (called key). In this example, we consider it to be roll. We have to maintain three different cases here. Case 1: When a node is added at the beginning- Only one next pointer needs to be modified. A new node is made the head New node points to the previously first element. Fig: Insert Before Head Case 2: When a node is added at the end- Two next pointers need to be modified. Last node now points to a new node. New node points to NULL. Fig: Insert at the end Two next pointers need to be modified. Previous node now points to the new node. New node points to the next node. Fig: Insert at the middle of two nodes Let’s see the code snippet for the insertion into the existing list: Convention: Put it before a key (here we assume roll). If there is no such key put it to the last. //node new has new roll, name, age //key is the roll of the node before which we will put the new node void ","date":"2018-06-19","objectID":"/post/linked-list-basics/:0:4","tags":["linked-list","data-structure"],"title":"Linked List Basics","uri":"/post/linked-list-basics/"},{"categories":["Lexical Analyzer"],"content":"Writing a Parser using (F)LEX and YACC/BISON","date":"2018-06-19","objectID":"/post/writing-a-parser-using-flex-and-yaccbison/","tags":["lexical-analyzer","parser","yacc","bison"],"title":"Writing a Parser using (F)LEX and YACC/BISON","uri":"/post/writing-a-parser-using-flex-and-yaccbison/"},{"categories":["Lexical Analyzer"],"content":"1 Task Description We will implement few statements found in C. We will call this language SubC. Given the grammar of SubC we will write the F(LEX) and YACC/BISON specification file that parses code written in SubC. We will generate a parser for only assignment statements. Following is the grammar for assignment statements for SubC. Stmt_list → Stmt | Stmt_list ; Stmt Stmt → Variable **assignop** Expression Variable → **id** | **id** [Expression] Expression → Simple_expression | Simple_expression **relop** Simple_expression Simple_expression → Term | Simple_expression **addop** Term Term → Factor | Term **mulop** Factor Factor → **id** | **num** | ( Expression) | **id** [Expression] | **not** Factor Tokens/Terminal symbols of this grammar are in BOLD font. Below are the specifications for the tokens Token Name Pattern/Description Id Starts with a letter followed by letters, digits, or underscore. Max length 5 characters. Cannot be any of the keywords: “if”, “else”, “while”, “for”, “repeat”, “until”, “return” , “main” Num Integers ‐ real numbers that include a decimal point and at least one digit to the left and right of the point Relop “\u003c“, “\u003e”, “\u003c=”, “\u003e=”, “==”, “!=” Addop “+”,”‐”,\"\\pipe\\pipe\" Mulop “*”, “/”, “%”, “\u0026\u0026” Assignop “=” Not “!” If successful in parsing a list of statements the parser will print “success” otherwise will print appropriate error message. ","date":"2018-06-19","objectID":"/post/writing-a-parser-using-flex-and-yaccbison/:1:0","tags":["lexical-analyzer","parser","yacc","bison"],"title":"Writing a Parser using (F)LEX and YACC/BISON","uri":"/post/writing-a-parser-using-flex-and-yaccbison/"},{"categories":["Lexical Analyzer"],"content":"2 Implementation We have to write (F)LEX and YACC/BISON specification files (e.g., subc.l and subc.y). The parser that yacc/bison generates should be able to call the lexical analyzer generated by lex/flex and perform parsing of the code (i.e., list of assignment statements) generated by the given grammar. Your LEX specification should be able to remove any white space from the code. All ids should be stored in a symbol table and printed out as output. ","date":"2018-06-19","objectID":"/post/writing-a-parser-using-flex-and-yaccbison/:2:0","tags":["lexical-analyzer","parser","yacc","bison"],"title":"Writing a Parser using (F)LEX and YACC/BISON","uri":"/post/writing-a-parser-using-flex-and-yaccbison/"},{"categories":["Lexical Analyzer"],"content":"2.1 Samples 2.1.1 Input 1 b= b + 1; input[b+2] = b; a = input [i+2] 2.1.2 Output 1 b input a Success 2.2.1 Input 1 a[]=0.2 2.2.2 Output 2 a missing expression ","date":"2018-06-19","objectID":"/post/writing-a-parser-using-flex-and-yaccbison/:2:1","tags":["lexical-analyzer","parser","yacc","bison"],"title":"Writing a Parser using (F)LEX and YACC/BISON","uri":"/post/writing-a-parser-using-flex-and-yaccbison/"},{"categories":["Lexical Analyzer"],"content":"3 Structures of Lex (analyzer) and YACC (parser) ","date":"2018-06-19","objectID":"/post/writing-a-parser-using-flex-and-yaccbison/:3:0","tags":["lexical-analyzer","parser","yacc","bison"],"title":"Writing a Parser using (F)LEX and YACC/BISON","uri":"/post/writing-a-parser-using-flex-and-yaccbison/"},{"categories":["Lexical Analyzer"],"content":"3.1 Lex (Lexical Analyzer): Lex is a computer program that generates lexical analyzers (what we did manually in the assignment 1 by java, but installing lex in the computer will do it automatically). Lex reads an input stream specifying the lexical analyzer and outputs source code implementing the lexer in the C programming language. ","date":"2018-06-19","objectID":"/post/writing-a-parser-using-flex-and-yaccbison/:3:1","tags":["lexical-analyzer","parser","yacc","bison"],"title":"Writing a Parser using (F)LEX and YACC/BISON","uri":"/post/writing-a-parser-using-flex-and-yaccbison/"},{"categories":["Lexical Analyzer"],"content":"3.2 Structure of a Lex file The structure of a Lex file is intentionally similar to that of a yacc file; files are divided into three sections, separated by lines that contain only two percent signs, as follows: Definition section %% Rules section %% C code section The definition section defines macros and imports header files written in C. It is also possible to write any C code here, which will be copied verbatim into the generated source file. The rules section associates regular expression patterns with C statements. When the lexer sees text in the input matching a given pattern, it will execute the associated C code. The C code section contains C statements and functions that are copied verbatim to the generated source file. These statements presumably contain code called by the rules in the rules section. In large programs it is more convenient to place this code in a separate file linked in at compile time. ","date":"2018-06-19","objectID":"/post/writing-a-parser-using-flex-and-yaccbison/:3:2","tags":["lexical-analyzer","parser","yacc","bison"],"title":"Writing a Parser using (F)LEX and YACC/BISON","uri":"/post/writing-a-parser-using-flex-and-yaccbison/"},{"categories":["Lexical Analyzer"],"content":"3.3 Example of a Lex file The following is an example Lex file for the flex version of Lex. It recognizes strings of numbers (integers) in the input, and simply prints them out. /*** Definition section ***/ %{ /* C code to be copied verbatim */ #include \u003cstdio.h\u003e %} /* This tells flex to read only one input file */ %option noyywrap %% /*** Rules section ***/ /* [0-9]+ matches a string of one or more digits */ [0-9]+ { /* yytext is a string containing the matched text. */ printf(\"Saw an integer: %s\\n\", yytext); } .|\\n { /* Ignore all other characters. */ } %% /*** C Code section ***/ int main(void) { /* Call the lexer, then quit. */ yylex(); return 0; } If this input is given to flex, it will be converted into a C file, lex.yy.c. This can be compiled into an executable which matches and outputs strings of integers. For example, given the input: abc123z.!\u0026*2gj6 The program will print: Saw an integer: 123 Saw an integer: 2 Saw an integer: 6 ","date":"2018-06-19","objectID":"/post/writing-a-parser-using-flex-and-yaccbison/:3:3","tags":["lexical-analyzer","parser","yacc","bison"],"title":"Writing a Parser using (F)LEX and YACC/BISON","uri":"/post/writing-a-parser-using-flex-and-yaccbison/"},{"categories":["Lexical Analyzer"],"content":"3.4 YACC-Yet Another Compiler Compiler (Parser) It is a LALR parser generator, generating a parser, the part of a compiler that tries to make syntactic sense of the source code. For example, a C program may contain something like: { int int; int = 33; printf(\"int: %d\\n\",int); } In this case, the lexical analyzer would have broken the input stream into a series of “tokens”, like this: { int int ; int = 33 ; printf ( \"int: %d\\n\" , int ) ; } Note that the lexical analyser (lex) has already determined that where the keyword int appears within quotes, it is really just part of a literal string. It is up to the parser to decide if the token int is being used as a keyword or variable. Or it may choose to reject the use of the name int as a variable name. The parser also ensures that each statement ends with a ; and that the brackets balance. More precisely lexical analyzer (i.e. lex) checks correctness of the stream of characters and parser (i.e. yacc) checks correctness of the stream of tokens i.e. which token will be followed by which one etc. ","date":"2018-06-19","objectID":"/post/writing-a-parser-using-flex-and-yaccbison/:3:4","tags":["lexical-analyzer","parser","yacc","bison"],"title":"Writing a Parser using (F)LEX and YACC/BISON","uri":"/post/writing-a-parser-using-flex-and-yaccbison/"},{"categories":["Lexical Analyzer"],"content":"3.5 Structure of a YACC source program A YACC source program is structurally similar to a LEX one. declarations %% rules %% routines The declaration section may be empty. Moreover, if the routines section is omitted, the second %% mark may be omitted also. Blanks, tabs, and newlines are ignored except that they may not appear in names. THE DECLARATIONS SECTION This section may contain the following items - Declarations of tokens. Yacc requires token names to be declared as such using the keyword %token. Declaration of the start symbol using the keyword %start C declarations: included files, global variables, types. C code between %{ and %}. RULES SECTION A rule has the form - nonterminal : sentential form | sentential form ................. | sentential form ; Actions may be associated with rules and are executed when the associated sentential form is matched. LEX-YACC INTERACTION yyparse() calls yylex() when it needs a new token. LEX YACC return(TOKEN) %token TOKEN TOKEN is used in production The external variable yylval is used in a LEX source program to return values of lexemes, yylval is assumed to be integer if you take no other action. Changes related to yylval must be made in the definitions section of YACC specification by adding new types in the following way %union { (type fieldname) (type fieldname) ............... } and defining which token and non-terminals will use these types %token \u003cfieldname\u003e token %type \u003cfieldname\u003e non-terminal in LEX specification by using the fieldnames in the assignment as follows yylval.fieldname = ........... If you need a record type, then add it in the union. Example: %union { struct s { double fvalue; int ivalue; } t; } in the LEX specification use the record name and record field in assignments: yylval.t.ivalue = ...... in the YACC rules specification use the record field only in the assignment: $1.ivalue = ...... assuming that $1 has the appropriate type, whatever it denotes. ","date":"2018-06-19","objectID":"/post/writing-a-parser-using-flex-and-yaccbison/:3:5","tags":["lexical-analyzer","parser","yacc","bison"],"title":"Writing a Parser using (F)LEX and YACC/BISON","uri":"/post/writing-a-parser-using-flex-and-yaccbison/"},{"categories":["Lexical Analyzer"],"content":"4 My Source code: Simple Parser using Lex and Yacc ","date":"2018-06-19","objectID":"/post/writing-a-parser-using-flex-and-yaccbison/:4:0","tags":["lexical-analyzer","parser","yacc","bison"],"title":"Writing a Parser using (F)LEX and YACC/BISON","uri":"/post/writing-a-parser-using-flex-and-yaccbison/"},{"categories":["Lexical Analyzer"],"content":"4.1 How to run my code Keep the parser folder anywhere in your computer. Keep the Makefile.mk file in home. Edit the first line of the Makefile.mk from “cd parser” to “cd path_of_the_parser_folder” Go to command prompt and write ./Makefile.mk ","date":"2018-06-19","objectID":"/post/writing-a-parser-using-flex-and-yaccbison/:4:1","tags":["lexical-analyzer","parser","yacc","bison"],"title":"Writing a Parser using (F)LEX and YACC/BISON","uri":"/post/writing-a-parser-using-flex-and-yaccbison/"},{"categories":["Lexical Analyzer"],"content":"4.2 Input Initially input.txt is given in the parser folder. You can customize the inputs. There is an additional input file named tricky_input.txt that contains some tricky cases. ","date":"2018-06-19","objectID":"/post/writing-a-parser-using-flex-and-yaccbison/:4:2","tags":["lexical-analyzer","parser","yacc","bison"],"title":"Writing a Parser using (F)LEX and YACC/BISON","uri":"/post/writing-a-parser-using-flex-and-yaccbison/"},{"categories":["Software"],"content":"Quick PostgeSQL installation and database creation guide.","date":"2018-03-26","objectID":"/post/postgresql-installation/","tags":["ubuntu","database","postgresql"],"title":"PostgreSQL Installation and DB Creation on Ubuntu 16.04","uri":"/post/postgresql-installation/"},{"categories":["Software"],"content":"Installation Note: This installation procedure is based on Ubuntu 16.04, for other versions see [https://www.postgresql.org/download/linux/ubuntu/] Create the file /etc/apt/sources.list.d/pgdg.list, and add a line for the repository $ echo \"deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main\" | sudo tee /etc/apt/sources.list.d/pgdg.list Import the repository signing key, and update the package lists $ wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - Ubuntu includes PostgreSQL by default. To install PostgreSQL on Ubuntu, use the apt-get (or other apt-driving) command $ sudo apt-get update $ sudo apt-get install postgresql-9.6 The bin directory (/usr/lib/postgresql/9.6/bin) of postgresql package contains all the necessary commands. Hence let’s make the directory accessible from any where. Edit ~/.profile file to export postgresql bin directory. $ vim ~/.profile Add the following two lines to export postgresql utility commands PATH=$PATH:/usr/lib/postgresql/9.6/bin export PATH Activate the profile $ . ~/.profile During the installation, PostgreSQL will create a default user to operate under. We will be using this user for some administrative purposes. Log in with the following command $ sudo su - postgres Do the same as #4 Logout from this user $ exit Now we can execute the utility commands from the shell, even for the postgres user. $ pg_ctl --help $ pg_ctl is a utility to initialize, start, stop, or control a PostgreSQL server. ","date":"2018-03-26","objectID":"/post/postgresql-installation/:0:1","tags":["ubuntu","database","postgresql"],"title":"PostgreSQL Installation and DB Creation on Ubuntu 16.04","uri":"/post/postgresql-installation/"},{"categories":["Software"],"content":"Setup User/Role and DB Note: PostgreSQL assumes that when we log in, we will be using a username that matches our operating system username, and that we will be connecting to a database with the same name as well. Switch to user postgres $ sudo su - postgres Run psql command to create postgres’s password. It doesn’t have any default password. $ psql postgres=# \\password postgres postgres=# ******** Create a user/role for our brand new database, let’s say blog and give the user to LOGIN and CREATEDB permissions. Also make the user OWNER of the db blog postgres=# CREATE ROLE admin WITH LOGIN PASSWORD '********'; postgres=# ALTER ROLE admin CREATEDB; postgres=# CREATE DATABASE blog OWNER admin; Quit psql commandline interface postgres=# \\q Exit (logout) from this user (postgres) $ exit Now we can run psql command with that newly created user without switching to user postgres $ psql --host=localhost --port=5432 --username=admin --password --dbname=blog This will connect the command line interface to the new db blog with this user admin logged in. Output should be something like the followings: psql (9.6.8) SSL connection (protocol: TLSv1.2, cipher: ECDHE-RSA-AES256-GCM-SHA384, bits: 256, compression: off) Type \"help\" for help. blog=\u003e ","date":"2018-03-26","objectID":"/post/postgresql-installation/:0:2","tags":["ubuntu","database","postgresql"],"title":"PostgreSQL Installation and DB Creation on Ubuntu 16.04","uri":"/post/postgresql-installation/"},{"categories":["Software"],"content":"Creating Cluster Data Directory initdb will attempt to create the directory we specify if it does not already exist. Of course, this will fail if initdb does not have permissions to write in the parent directory. It’s generally recommendable that the PostgreSQL user own not just the data directory but its parent directory as well, so that this should not be a problem. If the desired parent directory doesn’t exist either, we will need to create it first, using root privileges if the grandparent directory isn’t writable. So the process might look like this: $ sudo mkdir /usr/local/pgsql $ sudo chown postgres /usr/local/pgsql Again before running any postgresql commands we need to switch user to postgres $ sudo su - postgres Now we can point the directory for creating cluster data directory using initd $ initdb -D /usr/local/pgsql/data Output should be ended with something like this: Success. You can now start the database server using: pg_ctl -D /usr/local/pgsql/data -l logfile start So let’s start the server $ pg_ctl -D /usr/local/pgsql/data -l pgserver.log start ","date":"2018-03-26","objectID":"/post/postgresql-installation/:0:3","tags":["ubuntu","database","postgresql"],"title":"PostgreSQL Installation and DB Creation on Ubuntu 16.04","uri":"/post/postgresql-installation/"},{"categories":null,"content":"About Sayef","date":"2023-06-10","objectID":"/about/","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"Md Saiful Islam (SAYEF) Intro Skills Experience Education Projects Certifications ","date":"2023-06-10","objectID":"/about/:0:0","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"Introduction Erlangen, Germany · (+49) ASK-4-IT! · hello@sayef.tech I am a tech lover, an AI fanatic, experienced in developing tech solutions in the field of artificial intelligence, especially in computer vision and natural language processing. I have also spent a quite a lot of time in web development contributing to some enterprise applications. ","date":"2023-06-10","objectID":"/about/:1:0","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"Skills Tools PyTorch Keras TensorFlow Kubernetes Docker Gensim OpenNLP CoreNLP Matplotlib Scikit-Learn Linux Git ROS OpenCV Oracle Database MySQL PostgreSQL NoSQL HTML NodeJS Flask Scrapy jQuery Redis Solr Programming Languages Java - Proficient in building web applications, REST APIs using Spring MVC, Spring Boot and EJB. C/C++ - Experience in ACM ICPC contest programming, ROS and image processing. Python - Skilled and machine learning experience as primary language. Also proficient in building REST APIs using Flask/FastAPI. ","date":"2023-06-10","objectID":"/about/:2:0","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"Experience ","date":"2023-06-10","objectID":"/about/:3:0","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"NLP Engineer Fraunhofer IIS, Erlangen – (January 2022 - Present) Developing tools and methods using MLOps to bring NLU research into production for the NLP team of Audio and Media Technologies group. ","date":"2023-06-10","objectID":"/about/:3:1","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"Research Assistant Fraunhofer IIS, Nuremberg – (September 2020 - December 2021) Collaborated in different NLP and knowledge representation tasks to identify, analyze and evaluate market and technology for the Future Engineering team. ","date":"2023-06-10","objectID":"/about/:3:2","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"Software Engineer (Werkstudent) IAV (Automobile Engineering) GmbH, Gifhorn – (March 2019 - February 2020) Contributed in different computer vision tasks for the UAV team in making drone-based security/surveillance systems. ","date":"2023-06-10","objectID":"/about/:3:3","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"Senior Software Engineer (AI) TigerIT Bangladesh Ltd, Dhaka – (January 2019 - November 2021) R\u0026D in the fields of machine learning, deep learning, computer vision, image processing and natural language processing. ","date":"2023-06-10","objectID":"/about/:3:4","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"Software Engineer TigerIT Bangladesh Ltd, Dhaka – (January 2016 - January 2019) Software development of enterprise application. ","date":"2023-06-10","objectID":"/about/:3:5","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"Education ","date":"2023-06-10","objectID":"/about/:4:0","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"Georg-August-Universität, Göttingen (Germany) MSc, Applied Computer Science – (September 2018 - September 2021) Data Science with Computational Neuroscience Subdomain. ","date":"2023-06-10","objectID":"/about/:4:1","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"University of Dhaka, Dhaka (Bangladesh) BSc, Computer Science and Engineering – (January 2012 - January 2016) ","date":"2023-06-10","objectID":"/about/:4:2","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"Projects This section contains awesome projects that I’ve developed: ","date":"2023-06-10","objectID":"/about/:5:0","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"ANPR (Bangladesh) Automatic number plate recognition system. (All rights to TigerIT Ltd.) An automatic license plate recognition system, based on several deep learning models for each task, i.e. automatic license plate detection, finding text area, and recognition of city name, vehicle class and number simultaneously. Language \u0026 Tools: Python, PyTorch, Flask, Deep Learning ","date":"2023-06-10","objectID":"/about/:5:1","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"FRS Robust face recognition system for office surveillance. (All rights to TigerIT Ltd.) A surveillance application system for recognizing intruders in corporate office premises. The deep learning framework PyTorch has been used with transfer learning from open-source trained models. Language \u0026 Tools: Python, ONNX, Flask, PyTorch, Deep Learning ","date":"2023-06-10","objectID":"/about/:5:2","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"EmoCam Emotion Based Video Recommendation System. (Personal) An approach towards video recommendation system based on emotion read from the face of a user in front of the camera. Language \u0026 Tools: Python, NodeJS, Keras View project ","date":"2023-06-10","objectID":"/about/:5:3","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"Corella An NLP based Dialogue Engine. (All rights to TigerIT Ltd.) Corella is the heart of AI-driven application KinderMate which is targeted to kids’ entertainment and knowledge. It synthesizes kids’ search query using NLP techniques and automates decisions to pull contents from predefined knowledge pools. It has also hand-crafted conversation mode that helps kids learning through conversation games. Language \u0026 Tools: Python, Java, OpenDial, OpenNLP, Gensim, Scikit-Learn View project ","date":"2023-06-10","objectID":"/about/:5:4","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"DocRefiner A document image refiner. (All rights to TigerIT Ltd.) An automated image resizing and refining tool that aligns the skewed images of the documents as much as possible without losing any vital information i.e. writing, figures, signatures, seal, etc. It can adjust brightness by increasing intensities of semi-washed data. It also reduces file size without losing readability of the document. Language \u0026 Tools: Python, Computer Vision, Keras, Neural Networks ","date":"2023-06-10","objectID":"/about/:5:5","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"OCR for Number Plate Recognition of Nepal EVR OCR based automated QA of number plates. (All rights to TigerIT Ltd.) The ultimate goal of this domain-specific application is a quality assurance of the vehicle’s number plate after emboss printing. The application can detect zone name, plate number, plate color, font color, screw holes and SIT tag holes. Language \u0026 Tools: C++, OpenCV ","date":"2023-06-10","objectID":"/about/:5:6","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"EVR Tajikistan \u0026 Nepal Vehicle Registration System for Tajikistan and Nepal. (All rights to TigerIT Ltd.) This enterprise solution allows people of Tajikistan (and Nepal with different requirements) to register vehicle information, capture owner’s photo, signature, fingerprints and upload other necessary documents. Later on, this information can be used to search the details of any vehicle and renewing the registration. This system can also find the criminal match for a vehicle. Language \u0026 Tools: Java, Spring ","date":"2023-06-10","objectID":"/about/:5:7","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"3D Carrom Board Modeling An OpenGL graphics project to modol carrom board. A C++ project which was targeted to implement all basics of Computer Graphics i.e. modeling, lighting, shading and movements of objects with the help of OpenGL library. Language \u0026 Tools: C/C++ OpenGL View project ","date":"2023-06-10","objectID":"/about/:5:8","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"99-Text-Compressor A text file compressor and extractor. (Personal) A C/C++ project to compress large text files and decompress them without any data loss using the most popular Huffman algorithm. Language \u0026 Tools: C/C++ View project ","date":"2023-06-10","objectID":"/about/:5:9","tags":null,"title":"About Sayef","uri":"/about/"},{"categories":null,"content":"Awards / Certifications / Contests Computer Vision for Faces – By Big Vision LLC. Certificate earned at Wednesday, November 15, 2017. Neural Networks and Deep Learning – By deeplearning.ai on Coursera. Certificate earned at Saturday, December 23, 2017. Improving Deep Neural Networks, Hyperparameter tuning, Regularization and Optimization – By deeplearning.ai on Coursera. Certificate earned at Sunday, February 11, 2018. Structuring Machine Learning Projects – By deeplearning.ai on Coursera. Certificate earned at Sunday, February 25, 2018. Convolutional Neural Networks – By deeplearning.ai on Coursera. Certificate earned at Monday, March 26, 2018. Sequence Models – By deeplearning.ai on Coursera. Certificate earned at Sunday, April 15, 2018. Participant of ACM ICPC Asia Regional Dhaka Site (2013 \u0026 2014). ","date":"2023-06-10","objectID":"/about/:6:0","tags":null,"title":"About Sayef","uri":"/about/"}]