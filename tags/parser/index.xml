<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>parser - Tag - Sayef&#39;s Tech Blog</title>
        <link>https://sayef.github.io/tags/parser/</link>
        <description>parser - Tag - Sayef&#39;s Tech Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>hello@sayef.tech (Sayef)</managingEditor>
            <webMaster>hello@sayef.tech (Sayef)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 19 Jun 2018 04:15:37 &#43;0800</lastBuildDate><atom:link href="https://sayef.github.io/tags/parser/" rel="self" type="application/rss+xml" /><item>
    <title>Writing a Parser using (F)LEX and YACC/BISON</title>
    <link>https://sayef.github.io/post/writing-a-parser-using-flex-and-yaccbison/</link>
    <pubDate>Tue, 19 Jun 2018 04:15:37 &#43;0800</pubDate>
    <author>Sayef</author>
    <guid>https://sayef.github.io/post/writing-a-parser-using-flex-and-yaccbison/</guid>
    <description><![CDATA[1 Task Description We will implement few statements found in C. We will call this language SubC. Given the grammar of SubC we will write the F(LEX) and YACC/BISON specification file that parses code written in SubC. We will generate a parser for only assignment statements. Following is the grammar for assignment statements for SubC.
1 2 3 4 5 6 7 Stmt_list → Stmt | Stmt_list ; Stmt Stmt → Variable **assignop** Expression Variable → **id** | **id** [Expression] Expression → Simple_expression | Simple_expression **relop** Simple_expression Simple_expression → Term | Simple_expression **addop** Term Term → Factor | Term **mulop** Factor Factor → **id** | **num** | ( Expression) | **id** [Expression] | **not** Factor Tokens/Terminal symbols of this grammar are in BOLD font.]]></description>
</item>
</channel>
</rss>
